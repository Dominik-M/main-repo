/*
 * Copyright (C) 2017 Dominik Messerschmidt <dominik.messerschmidt@continental-corporation.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package graphic;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.Timer;

/**
 *
 * @author Dominik Messerschmidt
 * <dominik.messerschmidt@continental-corporation.com>
 */
public class MainPanel extends javax.swing.JPanel
{

    public static final long MAX_HEAP_SPACE = 1024 * 1024 * 128;

    private static MainPanel instance;
    private final Timer repaintTimer = new Timer(500, new ActionListener()
    {
        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (main.Main.filecounter > 0)
            {
                progressText.setText(main.Main.filecounter + " images found so far.");
            }
            else
            {
                progressText.setText("No images found.");
            }
            repaint();
        }
    });

    private final Runnable LOAD_FILES_ACTION = new Runnable()
    {
        @Override
        public void run()
        {
            startBtn.setText("Stop");
            repaintTimer.start();
            File root = new File(filename.getText());
            System.out.println("Listing PNG/JPEG files in \"" + root.getAbsolutePath() + "\" and subidrectories");
            ProgressPanel.getInstance().setText("Scanning...");
            ProgressPanel.getInstance().setProgress(0);
            main.Main.filecounter = 0;
            LinkedList<File> files = main.Main.listImagefilesRecursive(root);
            System.out.println("found " + files.size() + " images");
            ProgressPanel.getInstance().setText("Calculating...");
            long totalSize = 0;
            for (File f : files)
            {
                totalSize += f.length();
            }
            ProgressPanel.getInstance().setText("Loading images...");
            main.Main.interruptFlag = false;
            long size = 0;
            for (File f : files)
            {
                System.out.println("Loading image " + f);
                try
                {
                    BufferedImage img = ImageIO.read(f);
                    loadedFiles.add(f);
                    loadedImages.add(img);
                } catch (IOException | java.lang.OutOfMemoryError ex)
                {
                    System.err.println(ex.toString());
                }
                size += f.length();
                ProgressPanel.getInstance().setProgress((int) (100.0 * size / totalSize + 0.5));
                if (main.Main.interruptFlag)
                {
                    break;
                }
                else if (size > MAX_HEAP_SPACE)
                {
                    System.out.println("Reached max heap space. Loading stopped.");
                    break;
                }
            }
            System.out.println("Loaded " + loadedImages.size() + " images");
            ProgressPanel.getInstance().setText("Scaling images...");
            imagePanel.setImages(loadedImages, loadedFiles);
            ProgressPanel.getInstance().setText("Ready");
            main.Main.interruptFlag = false;
            repaintTimer.stop();
            startBtn.setText("Start");
        }
    };
    private Thread loaderThread;
    private LinkedList<BufferedImage> loadedImages = new LinkedList<>();
    private LinkedList<File> loadedFiles = new LinkedList<>();
    private ImageGridPanel imagePanel;

    public static MainPanel getInstance()
    {
        if (instance == null)
        {
            instance = new MainPanel();
        }
        return instance;
    }

    /**
     * Creates new form MainPanel
     */
    public MainPanel()
    {
        imagePanel = new ImageGridPanel();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        filename = new javax.swing.JTextField();
        selectBtn = new javax.swing.JButton();
        startBtn = new javax.swing.JButton();
        progressText = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        imageScrollPane = new JScrollPane(imagePanel);

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Root Directoy:");

        filename.setText("C:\\");

            selectBtn.setText("...");
            selectBtn.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    selectBtnActionPerformed(evt);
                }
            });

            startBtn.setText("Start");
            startBtn.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    startBtnActionPerformed(evt);
                }
            });

            progressText.setText("No images found.");

            clear.setText("Clear");
            clear.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    clearActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(filename, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(selectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(startBtn)
                    .addContainerGap())
                .addGroup(layout.createSequentialGroup()
                    .addComponent(progressText)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clear))
                .addComponent(imageScrollPane)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(filename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(selectBtn)
                        .addComponent(startBtn))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(imageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(progressText, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(clear, javax.swing.GroupLayout.Alignment.TRAILING)))
            );
        }// </editor-fold>//GEN-END:initComponents

    private void selectBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectBtnActionPerformed
    {//GEN-HEADEREND:event_selectBtnActionPerformed
        JFileChooser jfc = new JFileChooser(new File(filename.getText()));
        jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int result = jfc.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION)
        {
            System.out.println("Pfad: " + jfc.getSelectedFile());
            filename.setText(jfc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_selectBtnActionPerformed

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startBtnActionPerformed
    {//GEN-HEADEREND:event_startBtnActionPerformed
        if (loaderThread == null || !loaderThread.isAlive())
        {
            File root = new File(filename.getText());
            if (root.exists())
            {
                loaderThread = new Thread(LOAD_FILES_ACTION);
                loaderThread.start();
            }
            else
            {
                System.err.println(root + " does not exist");
            }
        }
        else
        {
            main.Main.interruptFlag = true;
            System.out.println("loader interrupted");
        }
    }//GEN-LAST:event_startBtnActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearActionPerformed
    {//GEN-HEADEREND:event_clearActionPerformed
        loadedImages.clear();
        loadedFiles.clear();
        imagePanel.setImages(loadedImages, loadedFiles);
    }//GEN-LAST:event_clearActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JTextField filename;
    private javax.swing.JScrollPane imageScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel progressText;
    private javax.swing.JButton selectBtn;
    private javax.swing.JButton startBtn;
    // End of variables declaration//GEN-END:variables
}
