/*
 * Copyright (C) 2015 Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package snake;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import javax.swing.JPanel;
import snake.Profile.Preferences;

/**
 *
 * @author Dominik
 */
public class Frame extends javax.swing.JFrame implements ProfileListener {

    private static final long serialVersionUID = 1L;
    public static final Frame FRAME = new Frame();
    private JPanel mainPanel;
    private SnakePanel game;

    /**
     * Creates new form Frame - Singleton class
     */
    private Frame() {
        super("Snake");
        initComponents();
        this.setLayout(new BorderLayout());
    }

    public void setMainPanel(JPanel p) {
        if (mainPanel != null) {
            this.remove(mainPanel);
        }
        mainPanel = p;
        if (mainPanel.getClass() == SnakePanel.class) {
            game = (SnakePanel) mainPanel;
        }
        setMinimumSize(mainPanel.getMinimumSize());
        int width = this.getContentPane().getWidth();
        int height = this.getContentPane().getHeight();
        mainPanel.setBounds(0, 0, width, height);
        getContentPane().add(mainPanel, BorderLayout.CENTER);
        mainPanel.requestFocus();
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        speedbtngrp = new javax.swing.ButtonGroup();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        slowBtn = new javax.swing.JRadioButtonMenuItem();
        normalBtn = new javax.swing.JRadioButtonMenuItem();
        fastBtn = new javax.swing.JRadioButtonMenuItem();
        insaneBtn = new javax.swing.JRadioButtonMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jMenu1.setText("System");

        jMenuItem1.setText("Reset");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        jMenu3.setText("Speed");

        speedbtngrp.add(slowBtn);
        slowBtn.setText("Slow");
        slowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slowBtnActionPerformed(evt);
            }
        });
        jMenu3.add(slowBtn);

        speedbtngrp.add(normalBtn);
        normalBtn.setSelected(true);
        normalBtn.setText("Normal");
        normalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalBtnActionPerformed(evt);
            }
        });
        jMenu3.add(normalBtn);

        speedbtngrp.add(fastBtn);
        fastBtn.setText("Fast");
        fastBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastBtnActionPerformed(evt);
            }
        });
        jMenu3.add(fastBtn);

        speedbtngrp.add(insaneBtn);
        insaneBtn.setText("Insane");
        insaneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insaneBtnActionPerformed(evt);
            }
        });
        jMenu3.add(insaneBtn);

        jMenu2.add(jMenu3);

        jMenuItem2.setText("Input...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 234, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if (Profile.getCurrentProfile() != null) {
            Profile.Preferences prefs = Profile.getCurrentProfile().getPreferences();
            prefs.windowWidth = this.getWidth();
            prefs.windowHeight = this.getHeight();
            Profile.getCurrentProfile().setPreferences(prefs);
        }
    }//GEN-LAST:event_formComponentResized

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem1ActionPerformed
        if (game != null) {
            game.gameover();
        }
        Snake.saveHighscores(Snake.HIGHSCORE_FILE);
        setMainPanel(new MenuPanel());
    }// GEN-LAST:event_jMenuItem1ActionPerformed

    private void slowBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_slowBtnActionPerformed
        if (Profile.getCurrentProfile() != null) {
            Preferences prefs = Profile.getCurrentProfile().getPreferences();
            prefs.clockDelay = SnakePanel.CLOCK_DELAY_SLOW;
            Profile.getCurrentProfile().setPreferences(prefs);
        }
    }// GEN-LAST:event_slowBtnActionPerformed

    private void normalBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_normalBtnActionPerformed
        if (Profile.getCurrentProfile() != null) {
            Preferences prefs = Profile.getCurrentProfile().getPreferences();
            prefs.clockDelay = SnakePanel.CLOCK_DELAY_NORMAL;
            Profile.getCurrentProfile().setPreferences(prefs);
        }
    }// GEN-LAST:event_normalBtnActionPerformed

    private void fastBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_fastBtnActionPerformed
        if (Profile.getCurrentProfile() != null) {
            Preferences prefs = Profile.getCurrentProfile().getPreferences();
            prefs.clockDelay = SnakePanel.CLOCK_DELAY_FAST;
            Profile.getCurrentProfile().setPreferences(prefs);
        }
    }// GEN-LAST:event_fastBtnActionPerformed

    private void insaneBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_insaneBtnActionPerformed
        if (Profile.getCurrentProfile() != null) {
            Preferences prefs = Profile.getCurrentProfile().getPreferences();
            prefs.clockDelay = SnakePanel.CLOCK_DELAY_INSANE;
            Profile.getCurrentProfile().setPreferences(prefs);
        }
    }// GEN-LAST:event_insaneBtnActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem2ActionPerformed
        InputConfig.showInputConfigDialog(this);
    }// GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem fastBtn;
    private javax.swing.JRadioButtonMenuItem insaneBtn;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JRadioButtonMenuItem normalBtn;
    private javax.swing.JRadioButtonMenuItem slowBtn;
    private javax.swing.ButtonGroup speedbtngrp;
    // End of variables declaration//GEN-END:variables

    public void listChanged(ListChangeEvent evt) {
        System.out.println("Profiles: ");
        for (Profile p : Profile.getProfiles()) {
            System.out.println(p);
        }
    }

    public void profileSwitched(Profile current) {
        System.out.println("Current profile: " + current);
    }

    public void preferenceChanged(Preferences prefs) {
        this.setPreferredSize(new java.awt.Dimension(prefs.windowWidth,
                prefs.windowHeight));
        try {
            SnakePanel.initialDelay = prefs.clockDelay;
            ((SnakePanel) mainPanel).setDelay(prefs.clockDelay);
        } catch (Exception ex) {
            System.err.println("No game running");
        }
        switch (prefs.clockDelay) {
            case SnakePanel.CLOCK_DELAY_SLOW:
                this.slowBtn.setSelected(true);
                break;
            case SnakePanel.CLOCK_DELAY_NORMAL:
                this.normalBtn.setSelected(true);
                break;
            case SnakePanel.CLOCK_DELAY_FAST:
                this.fastBtn.setSelected(true);
                break;
            case SnakePanel.CLOCK_DELAY_INSANE:
                this.insaneBtn.setSelected(true);
                break;
        }
        pack();
    }

    private final javax.swing.JLabel archUnlockLabel = new javax.swing.JLabel("", javax.swing.JLabel.CENTER);

    public void archievementUnlocked(Profile.Archievement a) {
        System.out.println("Archievement unlocked: " + a + " - "
                + a.NAME.description);
        archUnlockLabel.setText("Archievement unlocked: " + a + " - "
                + a.NAME.description);
        this.getContentPane().add(archUnlockLabel, BorderLayout.NORTH);
        javax.swing.Timer t = new javax.swing.Timer(2000, new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                FRAME.getContentPane().remove(archUnlockLabel);
                pack();
            }
        });
        t.setRepeats(false);
        t.start();
    }
}
