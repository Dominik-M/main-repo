/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphic;

import client.*;

/**
 *
 * @author Dundun
 */
public class ClientFrame extends javax.swing.JFrame implements ClientListener {

    private Client mclient;

    /**
     * Creates new form ClientFrame
     */
    public ClientFrame() {
        initComponents();
        nameIn.setText("Peter" + ((int) (Math.random() * 100)));
        ipIn.setText("localhost");
        portIn2.setText(client.Constants.PORT + "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        send = new javax.swing.JButton();
        portIn2 = new javax.swing.JTextField();
        input = new javax.swing.JTextField();
        nameIn = new javax.swing.JTextField();
        connect = new javax.swing.JButton();
        ipIn = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        output.setEditable(false);
        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        userList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Username 1", "Username 2" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(userList);

        jLabel3.setText("Port:");

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        portIn2.setText("52712");
        portIn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portIn2ActionPerformed(evt);
            }
        });

        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        nameIn.setText("Dein Name");
        nameIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameInActionPerformed(evt);
            }
        });

        connect.setText("Connect");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        ipIn.setText("255.255.255.255");
        ipIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipInActionPerformed(evt);
            }
        });

        jLabel1.setText("IP Adresse:");

        jLabel2.setText("Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ipIn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(portIn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(connect))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(input))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(ipIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(portIn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        inputActionPerformed(evt);
    }//GEN-LAST:event_sendActionPerformed

    private void portIn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portIn2ActionPerformed
        connectActionPerformed(evt);
    }//GEN-LAST:event_portIn2ActionPerformed

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        if (mclient != null) {
            mclient.send(input.getText());
        }
        input.setText("");
    }//GEN-LAST:event_inputActionPerformed

    private void nameInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameInActionPerformed
        connectActionPerformed(evt);
    }//GEN-LAST:event_nameInActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        final ClientFrame frame = this;
        new Thread(new Runnable() {

            @Override
            public void run() {
                if (mclient == null || !mclient.isConnected()) {
                    try {
                        mclient = new Client();
                        mclient.addClientListener(frame);
                        if (mclient.connect(nameIn.getText(), ipIn.getText(), Integer.parseInt(portIn2.getText()))) {
                            mclient.start();
                            if (!mclient.setUserName(nameIn.getText())) {
                                println("failed to set username");
                            }
                            mclient.setName("Thread_" + nameIn.getText());
                        } else {
                            println("Es konnte keine Verbindung hergestellt werden");
                        }
                        if (mclient.isConnected()) {
                            connect.setText("Disconnect");
                        }
                    } catch (Exception ex) {
                        println("Client konnte nicht gestartet werden: " + ex);
                    }
                } else {
                    mclient.disconnect();

                }
            }
        }).start();

    }//GEN-LAST:event_connectActionPerformed

    private void ipInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipInActionPerformed
        connectActionPerformed(evt);
    }//GEN-LAST:event_ipInActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connect;
    private javax.swing.JTextField input;
    private javax.swing.JTextField ipIn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameIn;
    public javax.swing.JTextArea output;
    private javax.swing.JTextField portIn2;
    private javax.swing.JButton send;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onUserlistChanged() {
        userList.setModel(new javax.swing.AbstractListModel() {
            public int getSize() {
                if (mclient == null || mclient.getUsers() == null) {
                    return 0;
                }
                return mclient.getUsers().length;
            }

            public Object getElementAt(int i) {
                if (mclient == null || mclient.getUsers() == null) {
                    return null;
                }
                return mclient.getUsers()[i];
            }
        });
    }

    @Override
    public void println(String txt) {
        this.output.append(txt + "\n");
    }

    @Override
    public void onConnect() {
        connect.setText("Disconnect");
    }

    @Override
    public void onDisconnect() {
        connect.setText("Connect");
        onUserlistChanged();
    }
}
