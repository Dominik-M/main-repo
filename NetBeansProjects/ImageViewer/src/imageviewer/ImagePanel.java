/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imageviewer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;

/**
 *
 * @author Dominik
 */
public class ImagePanel extends javax.swing.JPanel implements MouseMotionListener {

    public static final int SPOT = 16;

    private Image img;
    private Image nativeImg;
    private int gridwidth = SPOT;
    private int gridheight = SPOT;
    private int mouseX, mouseY;
    private int viewX, viewY;

    /**
     * Creates new form ImagePanel
     */
    public ImagePanel() {
        initComponents();
        this.addMouseMotionListener(this);
    }

    public void setGridSize(int hSpot, int vSpot) {
        this.gridwidth = hSpot;
        this.gridheight = vSpot;
        repaint();
    }

    public void setImage(Image image) {
        img = image;
        nativeImg = img;
    }

    public void scale(double factor) {
        img = nativeImg.getScaledInstance((int) (nativeImg.getWidth(null) * factor),
                (int) (nativeImg.getHeight(null) * factor), 0);
        this.setGridSize((int) (SPOT * factor), (int) (SPOT * factor));
    }

    @Override
    public Dimension getPreferredSize() {
        if (img != null) {
            return new Dimension(img.getWidth(null), img.getHeight(null));
        }
        return super.getPreferredSize();
    }

    @Override
    public void paintComponent(Graphics g) {
        g.setColor(Color.lightGray);
        g.fillRect(0, 0, getWidth(), getHeight());
        g.translate(viewX, viewY);
        if (img != null) {
            g.drawImage(img, 0, 0, this);
        } else {
            return;
        }
        g = g.create(0, 0, img.getWidth(null), img.getHeight(null));
        for (int x = 0, i = 0; x <= img.getWidth(null); x += gridwidth, i++) {
            g.drawLine(x, 0, x, img.getWidth(null));
        }
        for (int y = 0, i = 0; y <= img.getWidth(null); y += gridheight, i++) {
            g.drawLine(0, y, img.getWidth(null), y);
        }
        g.translate(-viewX, -viewY);
        int fontsize = gridheight / 2;
        g.setFont(new java.awt.Font("Consolas", 0, fontsize));
        g.setColor(Color.BLACK);
        for (int x = 0, i = -viewX / gridwidth; x <= img.getWidth(null); x += gridwidth, i++) {
            g.drawString("" + i, x, fontsize);
        }
        for (int y = 0, i = -viewY / gridheight; y <= this.img.getWidth(null); y += gridheight, i++) {
            g.drawString("" + i, 0, y + fontsize);
        }
        g.drawString(mouseX / gridwidth + "|" + mouseY / gridheight, mouseX, mouseY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void mouseDragged(MouseEvent me) {
        viewX += me.getX() - mouseX;
        viewY += me.getY() - mouseY;
        mouseX = me.getX();
        mouseY = me.getY();
        repaint();
    }

    @Override
    public void mouseMoved(MouseEvent me) {
        mouseX = me.getX();
        mouseY = me.getY();
        repaint();
    }
}
