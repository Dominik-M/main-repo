/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io;

import akinator.EditableKnoten;
import akinator.Frageknoten;
import java.awt.BorderLayout;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Dominik
 */
public class BaumEditorPanel extends javax.swing.JPanel {
    private EditableKnoten aktKnoten;
    private final EditableKnoten editKopf;
    private boolean geändert = false;

    /**
     * Creates new form BaumEditorPanel.
     * @param kopf Kopfknoten des Baumes
     */
    public BaumEditorPanel(EditableKnoten kopf) {
        initComponents();
        editKopf = kopf;
    }
    
    public void setAktKnoten(EditableKnoten k)
    {
        boolean ok = (k != null);
        if(aktKnoten != null && !aktKnoten.text.equals(txt.getText()))
        {
            int antwort=javax.swing.JOptionPane.showConfirmDialog(this.getParent(),
                "Es wurden Änderungen vorgenommen.\nSollen diese übernommen werden?",
                "Änderungen Übernehmen?",
                javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);
            if(antwort == javax.swing.JOptionPane.YES_OPTION)
            {
                txtActionPerformed(null);
            }
            else if(antwort == javax.swing.JOptionPane.CANCEL_OPTION)
                ok = false;
        }
        if (ok) {
            obenBtn.setEnabled(k.vorher != null);
            jaBtn.setEnabled(k.ja != null);
            neinBtn.setEnabled(k.nein != null);
            loeschenBtn.setEnabled((k.ja != null) && (k.nein != null));
            aktKnoten = k;
            txt.setText(k.text);
        }
    }
    
    public static void showBaumEditorDialog(Frageknoten kopf)
    {
        akinator.EditableKnoten editKopf = new akinator.EditableKnoten(null);
        editKopf.setFrageknoten(kopf);
        BaumEditorPanel panel = new BaumEditorPanel(editKopf);
        panel.setAktKnoten(editKopf);
        javax.swing.JDialog dialog = new javax.swing.JDialog();
        dialog.setTitle("Baum bearbeiten");
        dialog.setLayout(new BorderLayout());
        dialog.getContentPane().add(panel, BorderLayout.CENTER);
        dialog.setModal(true);
        dialog.pack();
        dialog.setVisible(true);
        dialog.setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
        dialog.addWindowListener(new java.awt.event.WindowListener() {

            @Override
            public void windowOpened(WindowEvent we) {
            }

            @Override
            public void windowClosing(WindowEvent we) {
                if (panel.geändert) {
                    int antwort = javax.swing.JOptionPane.showConfirmDialog(dialog,
                            "Es wurden Änderungen vorgenommen. Sollen diese übernommen werden?",
                            "Änderungen übernehmen?", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);
                    if (antwort == javax.swing.JOptionPane.YES_OPTION) {
                        panel.speichern();
                        dialog.dispose();
                    }
                    else if(antwort == javax.swing.JOptionPane.NO_OPTION)
                        dialog.dispose();
                }
            }

            @Override
            public void windowClosed(WindowEvent we) {
            }

            @Override
            public void windowIconified(WindowEvent we) {
            }

            @Override
            public void windowDeiconified(WindowEvent we) {
            }

            @Override
            public void windowActivated(WindowEvent we) {
            }

            @Override
            public void windowDeactivated(WindowEvent we) {
            }
        });
    }
    
    public void speichern()
    {
        akinator.Frageknoten kopf = editKopf.toFrageknoten();
        try {
            if(aktKnoten != null && (!aktKnoten.text.equals(txt.getText())))
                aktKnoten.text = txt.getText();
            akinator.Akinator.speicher(kopf);
            geändert = false;
        } catch (IOException ex) {
            Logger.getLogger(BaumEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt = new javax.swing.JTextField();
        obenBtn = new javax.swing.JButton();
        jaBtn = new javax.swing.JButton();
        neinBtn = new javax.swing.JButton();
        loeschenBtn = new javax.swing.JButton();
        apply = new javax.swing.JButton();

        txt.setText("Dies ist eine sehr lange Frage, die mit Ja oder Nein beantwortet wird");
        txt.setMinimumSize(txt.getPreferredSize());
        txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtActionPerformed(evt);
            }
        });

        obenBtn.setText("Nach Oben");
        obenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obenBtnActionPerformed(evt);
            }
        });

        jaBtn.setText("Ja Knoten");
        jaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jaBtnActionPerformed(evt);
            }
        });

        neinBtn.setText("Nein Knoten");
        neinBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neinBtnActionPerformed(evt);
            }
        });

        loeschenBtn.setText("Löschen");
        loeschenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loeschenBtnActionPerformed(evt);
            }
        });

        apply.setText("Übernehmen");
        apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(obenBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(apply))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jaBtn)
                                        .addGap(76, 76, 76)
                                        .addComponent(neinBtn))
                                    .addComponent(txt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(loeschenBtn)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(obenBtn)
                    .addComponent(apply))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jaBtn)
                    .addComponent(neinBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loeschenBtn)
                .addContainerGap(100, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void obenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obenBtnActionPerformed
        setAktKnoten(aktKnoten.vorher);
    }//GEN-LAST:event_obenBtnActionPerformed

    private void jaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jaBtnActionPerformed
        setAktKnoten(aktKnoten.ja);
    }//GEN-LAST:event_jaBtnActionPerformed

    private void neinBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neinBtnActionPerformed
        setAktKnoten(aktKnoten.nein);
    }//GEN-LAST:event_neinBtnActionPerformed

    private void txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtActionPerformed
        aktKnoten.text = txt.getText();
        geändert = true;
    }//GEN-LAST:event_txtActionPerformed

    private void loeschenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loeschenBtnActionPerformed
        if(aktKnoten != null && aktKnoten.nein != null &&
            javax.swing.JOptionPane.showConfirmDialog(this.getParent(), 
            "Wirklich diesen Knoten mit allen Unterknoten auf der \"JA\" Seite entfernen?",
            "Knoten Entfernen", javax.swing.JOptionPane.YES_NO_OPTION)
            == javax.swing.JOptionPane.YES_OPTION)
        {
            aktKnoten.text = aktKnoten.nein.text;
            aktKnoten.ja = aktKnoten.nein.ja;
            aktKnoten.nein = aktKnoten.nein.nein;
            txt.setText(aktKnoten.text);
            setAktKnoten(aktKnoten);
            geändert = true;
        }
    }//GEN-LAST:event_loeschenBtnActionPerformed

    private void applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyActionPerformed
        speichern();
    }//GEN-LAST:event_applyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apply;
    private javax.swing.JButton jaBtn;
    private javax.swing.JButton loeschenBtn;
    private javax.swing.JButton neinBtn;
    private javax.swing.JButton obenBtn;
    private javax.swing.JTextField txt;
    // End of variables declaration//GEN-END:variables
}
