package tools;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import pokemon.Pokemon;

public class PokedexGUI extends javax.swing.JDialog {
    private java.util.LinkedList<Pokemon> selected;

    public PokedexGUI(Pokemon... vorauswahl) {
        setTitle("Pokedex");
        try {
            initComponents();
            poks.setModel(new javax.swing.DefaultComboBoxModel(
                    Pokedex.getAll()
                    ));
        } catch (IOException ex) {
            Logger.getLogger(PokedexGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        selected=new java.util.LinkedList();
        if(vorauswahl!=null)
        for(Pokemon pok:vorauswahl)selected.add(pok);
        pokList.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return selected.size(); }
            public Object getElementAt(int i) { 
                Pokemon pok=selected.get(i);
                return pok.toString()+"("+pok.getLevel()+")";
            }
        });
    }
    
    public Pokemon[] getPokSelection(){
        Pokemon[] poks=new Pokemon[selected.size()];
        for(int i=0;i<poks.length;i++){
            poks[i]=selected.get(i);
        }
        return poks;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pokInfoComponent1 = new tools.PokInfoComponent();
        poks = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        pokList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        level = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        pokinfo = new tools.PokInfoComponent();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        save = new javax.swing.JMenuItem();
        load = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        poks.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        poks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poksActionPerformed(evt);
            }
        });

        pokList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(pokList);

        jLabel1.setText("Level: ");

        level.setText("1");

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        remove.setText("Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });
        jMenu1.add(load);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(poks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(remove))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pokinfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(poks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(add)
                            .addComponent(remove))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pokinfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        int lvl=Integer.parseInt(level.getText());
        try {
            selected.add(Pokedex.getPokemon(poks.getSelectedIndex()+1, lvl));
        } catch (IOException ex) {
            Logger.getLogger(PokedexGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
       pokList.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return selected.size(); }
            public Object getElementAt(int i) { 
                Pokemon pok=selected.get(i);
                return pok.toString()+"("+pok.getLevel()+")";
            }
        });
    }//GEN-LAST:event_addActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        int[] indices=pokList.getSelectedIndices();
        for(int i=indices.length-1;i>=0;i--)selected.remove(indices[i]);
        pokList.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return selected.size(); }
            public Object getElementAt(int i) { 
                Pokemon pok=selected.get(i);
                return pok.toString()+"("+pok.getLevel()+")";
            }
        });
    }//GEN-LAST:event_removeActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        JFileChooser jFC = new JFileChooser();
        if (jFC.showSaveDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            Pokedex.setFile(jFC.getSelectedFile());
            Pokemon[] p = new Pokemon[selected.size()];
            for (int i = 0; i < p.length; i++) {
                p[i] = selected.get(i);
            }
            try {
                Pokedex.schreibePoks(p);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(PokedexGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        JFileChooser jFC = new javax.swing.JFileChooser();
        if (jFC.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            Pokedex.setFile(jFC.getSelectedFile());
            Pokemon[] read = null;
            try {
                read = Pokedex.getAll();
            } catch (IOException ex) {
                Logger.getLogger(PokedexGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (read != null) {
                selected.clear();
                selected.addAll(Arrays.asList(read));
                pokList.setModel(new javax.swing.AbstractListModel() {
                    @Override
                    public int getSize() {
                        return selected.size();
                    }

                    @Override
                    public Object getElementAt(int i) {
                        Pokemon pok = selected.get(i);
                        return pok.toString() + "(" + pok.getLevel() + ")";
                    }
                });
            }
        }
    }//GEN-LAST:event_loadActionPerformed

    private void poksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poksActionPerformed
        try
        {
            pokinfo.setPokemon((Pokemon) poks.getSelectedItem());
        }catch(Exception ex)
        {
            System.out.println("Pokemon kann nicht angezeigt werden: "+ex);
        }
    }//GEN-LAST:event_poksActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField level;
    private javax.swing.JMenuItem load;
    private tools.PokInfoComponent pokInfoComponent1;
    private javax.swing.JList pokList;
    private tools.PokInfoComponent pokinfo;
    private javax.swing.JComboBox poks;
    private javax.swing.JButton remove;
    private javax.swing.JMenuItem save;
    // End of variables declaration//GEN-END:variables
}
