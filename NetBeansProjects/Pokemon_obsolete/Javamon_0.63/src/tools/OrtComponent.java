/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tools;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import welt.objekte.Objekt;
import welt.orte.Ort;

/**
 *
 * @author Dundun
 */
public class OrtComponent extends javax.swing.JPanel implements MouseListener,MouseMotionListener{
    private int spot,mouseX1,mouseY1,mouseX2,mouseY2;
    private welt.objekte.Objekt auswahl;
    private Ort ort;
    private boolean active,geaendert;

    /**
     * Creates new form OrtComponent
     */
    public OrtComponent() {
        this(new Ort("NeuerOrt",20,20){

          @Override
          public void erstelle() {}
      });
    }
    
    public OrtComponent(Ort alt){
        spot=32;
        ort=alt;
        initComponents();
        this.addMouseListener(this);
        this.addMouseMotionListener(this);
        this.setPreferredSize(new Dimension(ort.BREIT*spot,ort.HOCH*spot));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
   
  public void create(int breit,int hoch){
     ort=new Ort("NeuerOrt",breit,hoch) {

          @Override
          public void erstelle() {}
      };
     this.setPreferredSize(new Dimension(breit*spot, hoch*spot));
  }
  
  public void save(File f){
      String n=f.getName();
      if(n.indexOf(".")>0)n=n.substring(n.indexOf("."));
      
      System.out.println(ort);
      writeOrt(ort,f);
      geaendert=false;
  }
  
    /**
     * writes the given Ort Object to the given File.
     * @param o the Ort Object to be written.
     */
    public static void writeOrt(Ort o,File f){
      try {
          ObjectOutputStream oos;
          try (FileOutputStream fos = new FileOutputStream(f)) {
              oos = new ObjectOutputStream(fos);
              oos.writeObject(o);
              oos.close();
          }
        } catch (Exception ex) {
            Logger.getLogger(OrtComponent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
  
  public void lade(File f){
      FileInputStream fis;
        try {
            fis = new FileInputStream(f);
            try (ObjectInputStream ois = new ObjectInputStream(fis)) {
                ort = (welt.orte.Ort) ois.readObject();
                fis.close();
                this.setPreferredSize(new Dimension(ort.BREIT*spot,ort.HOCH*spot));
            }
        } catch (java.io.IOException | ClassNotFoundException ex) {
            System.err.println(ex);
        }
        repaint();
  }
    
    @Override
  public void paintComponent(Graphics g){
      g.setColor(Color.GRAY);
      g.fillRect(0, 0,this.getWidth(),this.getHeight());
//      g.setColor(Color.WHITE);
//      g.fillRect(0, 0, ort.BREIT*spot, ort.HOCH*spot);
//      // Zeichne schwarzes Gitter
//      g.setColor(Color.BLACK);
//      for(int i=0;i<Javamon.BREIT;i++){
//        g.drawLine(i*spot,0,i*spot,Javamon.HOCH*spot);
//      }
//      for(int i=0;i<Javamon.HOCH;i++){
//        g.drawLine(0,i*spot,Javamon.BREIT*spot,i*spot);
//      }
      if(ort!=null){
          for(int x=0; x<ort.BREIT; x++){
              for(int y=0; y<ort.HOCH; y++){
                  ort.getBackground().paintComponent(g.create(x*spot, y*spot, spot, spot), spot);
                  ort.getObjekt(x,y).paintComponent(g.create(x*spot, y*spot, spot, spot), spot);
              }
          }
      }
      if(auswahl!=null && active){
          if(auswahl.equals(Objekt.HAUSWAND)){
              int breit=mouseX2/spot-mouseX1/spot,hoch=mouseY2/spot-mouseY1/spot;
              int x=mouseX1,y=mouseY1;
                  for(int x1=0;x1<breit;x1++){
                     for(int y1=0;y1<hoch;y1++){
                      try{
                          if(x1==breit/2&&y1==hoch-1){
                          new welt.objekte.Tür().paintComponent(g.create((x/spot+x1)*spot,(y/spot+y1)*spot,spot,spot), spot);
                       }else if(y1<hoch/2){
                         new welt.objekte.Dach(y1==0,y1==hoch/2-1,x1==0,x1==breit-1).paintComponent(g.create((x/spot+x1)*spot,(y/spot+y1)*spot,spot,spot), spot);
                          }else{
                            if(x1==0){
                            if(y1==hoch-1)Objekt.ECKE_LINKS.paintComponent(g.create((x/spot+x1)*spot,(y/spot+y1)*spot,spot,spot), spot);
                            else Objekt.FENSTER_LINKS.paintComponent(g.create((x/spot+x1)*spot,(y/spot+y1)*spot,spot,spot), spot);;
                          }
                           else if(x1==breit-1){
                            if(y1==hoch-1)Objekt.ECKE_RECHTS.paintComponent(g.create((x/spot+x1)*spot,(y/spot+y1)*spot,spot,spot), spot);
                              else Objekt.FENSTER_RECHTS.paintComponent(g.create((x/spot+x1)*spot,(y/spot+y1)*spot,spot,spot), spot);
                         }
                           else if(y1==hoch-1){
                             Objekt.FENSTER_UNTEN.paintComponent(g.create((x/spot+x1)*spot,(y/spot+y1)*spot,spot,spot), spot);
                           }
                          else Objekt.FENSTER.paintComponent(g.create((x/spot+x1)*spot,(y/spot+y1)*spot,spot,spot), spot);
                         }
                      }catch(Exception ex){continue;}
                   }
                }
          }else if(auswahl.equals(Objekt.HÜTTENDACH)){
              int breit=mouseX2/spot-mouseX1/spot;
              int x=mouseX1/spot,y=mouseY1/spot;
              Objekt.HÜTTENDACH_LINKS.paintComponent(g.create((x)*spot,(y)*spot,spot,spot), spot);
              Objekt.HÜTTE_LINKS.paintComponent(g.create((x)*spot,(y+1)*spot,spot,spot), spot);
              Objekt.HÜTTENDACH.paintComponent(g.create((x+1)*spot,(y)*spot,spot,spot), spot);
              Objekt.FENSTER_UNTEN.paintComponent(g.create((x+1)*spot,(y+1)*spot,spot,spot), spot);
              for(int x1=0;x1<breit;x1++){
                 Objekt.HÜTTENDACH.paintComponent(g.create((x+2+x1)*spot,(y)*spot,spot,spot), spot);
                 Objekt.FENSTER_UNTEN.paintComponent(g.create((x+2+x1)*spot,(y+1)*spot,spot,spot), spot);
              }
              Objekt.HÜTTENDACH_RECHTS.paintComponent(g.create((x+2+breit)*spot,(y)*spot,spot,spot), spot);
              Objekt.HÜTTE_RECHTS.paintComponent(g.create((x+2+breit)*spot,(y+1)*spot,spot,spot), spot);
          }
          else{
            if(mouseX1>mouseX2){
              if(mouseY1>mouseY2){
                  for(int x=mouseX2-mouseX2%spot;x<=mouseX1-mouseX1%spot;x+=spot)
                     for(int y=mouseY2-mouseY2%spot;y<=mouseY1-mouseY1%spot;y+=spot)    
                        auswahl.paintComponent(g.create(x,y, spot, spot), spot);
              }else{
                  for(int x=mouseX2-mouseX2%spot;x<=mouseX1-mouseX1%spot;x+=spot)
                     for(int y=mouseY1-mouseY1%spot;y<=mouseY2-mouseY2%spot;y+=spot)    
                        auswahl.paintComponent(g.create(x,y, spot, spot), spot);
              }  
            }else{
                if(mouseY1>mouseY2){
                    for(int x=mouseX1-mouseX1%spot;x<=mouseX2-mouseX2%spot;x+=spot)
                     for(int y=mouseY2-mouseY2%spot;y<=mouseY1-mouseY1%spot;y+=spot)    
                        auswahl.paintComponent(g.create(x,y, spot, spot), spot);
                }else{
                   for(int x=mouseX1-mouseX1%spot;x<=mouseX2-mouseX2%spot;x+=spot)
                     for(int y=mouseY1-mouseY1%spot;y<=mouseY2-mouseY2%spot;y+=spot)    
                        auswahl.paintComponent(g.create(x,y, spot, spot), spot);
                }
            }
          }
      }
      // Startpunkt zeichnen
      OrtEditor.START.paintComponent(g.create(ort.getStartX()*spot,ort.getStartY()*spot,spot,spot), spot);
  }

    @Override
    public void mouseClicked(MouseEvent e) {
        if(e.getButton()==MouseEvent.BUTTON3){
            Objekt o=ort.getObjekt(e.getX()/spot,e.getY()/spot);
            if(o!=null){
                new ObjektProperties(o,ort).setVisible(true);
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {}

    @Override
    public void mouseReleased(MouseEvent e) {
      if(auswahl==null){
          //auswahl=ort.getObjekt(mouseX1/spot,mouseY1/spot);
      }else{
          if(auswahl.equals(OrtEditor.START)){
              ort.setStartPos(e.getX()/spot,e.getY()/spot);
              return;
          }
            try {
                auswahl=auswahl.getClass().newInstance();
            } catch (InstantiationException ex) {
            } catch (IllegalAccessException ex) {
                Logger.getLogger(OrtComponent.class.getName()).log(Level.SEVERE, null, ex);
            }
        if(e.getButton()==MouseEvent.BUTTON1){
            
            // Haus zeichnen
            if (auswahl.equals(Objekt.HAUSWAND)) {
                int x=mouseX1/spot,y=mouseY1/spot;
                int breit = mouseX2/spot-x, hoch = mouseY2/spot-y;
                if(breit<2 || hoch<2)return;
                String n=JOptionPane.showInputDialog(this,"Bitte Namen angeben.","");
                if(n==null)Ort.zeichneHaus(ort, x, y, breit, hoch,false);
                else if(n.length()>1)ort.addNachbarOrt(Ort.zeichneHaus(ort, n, x, y, breit, hoch));
                else  ort.addNachbarOrt(Ort.zeichneHaus(ort, x, y, breit, hoch,true));
            }
            // Hütte zeichnen
            else if(auswahl.equals(Objekt.HÜTTENDACH)){
              int x=mouseX1/spot,y=mouseY1/spot;
              int breit = mouseX2/spot-x;
              if(breit<1)return;
                int op=JOptionPane.showConfirmDialog(this,"Soll die Hütte bewohnt sein?","Neue Hütte",JOptionPane.YES_NO_OPTION);
                ort.addNachbarOrt(Ort.zeichneHütte(ort, x, y, breit,4,op==JOptionPane.YES_OPTION));
            } else {
                if (mouseX1 > mouseX2) {
                    if (mouseY1 > mouseY2) {
                        for (int x = mouseX2 - mouseX2 % spot; x <= mouseX1 - mouseX1 % spot; x += spot) {
                            for (int y = mouseY2 - mouseY2 % spot; y <= mouseY1 - mouseY1 % spot; y += spot) {
                                ort.setObjekt(x / spot,y / spot,auswahl);
                            }
                        }
                    } else {
                        for (int x = mouseX2 - mouseX2 % spot; x <= mouseX1 - mouseX1 % spot; x += spot) {
                            for (int y = mouseY1 - mouseY1 % spot; y <= mouseY2 - mouseY2 % spot; y += spot) {
                                ort.setObjekt(x / spot,y / spot,auswahl);
                            }
                        }
                    }
                } else {
                    if (mouseY1 > mouseY2) {
                        for (int x = mouseX1 - mouseX1 % spot; x <= mouseX2 - mouseX2 % spot; x += spot) {
                            for (int y = mouseY2 - mouseY2 % spot; y <= mouseY1 - mouseY1 % spot; y += spot) {
                                ort.setObjekt(x / spot,y / spot,auswahl);
                            }
                        }
                    } else {
                        for (int x = mouseX1 - mouseX1 % spot; x <= mouseX2 - mouseX2 % spot; x += spot) {
                            for (int y = mouseY1 - mouseY1 % spot; y <= mouseY2 - mouseY2 % spot; y += spot) {
                                ort.setObjekt(x / spot,y / spot,auswahl);
                            }
                        }
                    }
                }
            }
            geaendert=true;
        }
      }
    }

    @Override
    public void mouseEntered(MouseEvent e) {
      active=true;
    }

    @Override
    public void mouseExited(MouseEvent e) {
      active=false;
    }

    @Override
    public void mouseDragged(MouseEvent e) {
      mouseX2=e.getX();
      mouseY2=e.getY();
      repaint();
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        mouseX1=e.getX();
        mouseY1=e.getY();
        mouseX2=mouseX1;
        mouseY2=mouseY1;
        repaint();
    }
    
    public boolean wurdeGeaendert(){
        return geaendert;
    }
    
    public void setSelectedObjekt(Objekt o){
        auswahl=o;
        if(o==null)return;
    }

    public Ort getOrt(){
        return ort;
    }
    
    public void setOrt(Ort neu){
        ort=neu;
        setPreferredSize(new Dimension(ort.BREIT*spot,ort.HOCH*spot));
        repaint();
    }
    
   public boolean größer(){
    spot+=16;
    setPreferredSize(new Dimension(ort.BREIT*spot,ort.HOCH*spot));
    repaint();
    return spot<64;
  }
  
  public boolean kleiner(){
    spot-=16;
    setPreferredSize(new Dimension(ort.BREIT*spot,ort.HOCH*spot));
    repaint();
    return spot>16;
  }
    
  public int getSpot(){
      return spot;
  }
}