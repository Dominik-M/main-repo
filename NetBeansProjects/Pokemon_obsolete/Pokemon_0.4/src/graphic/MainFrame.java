/*
 * Copyright (C) 2015 Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package graphic;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import language.Text;
import spiel.IO;
import spiel.OutputListener;
import spiel.Spieler;
import spiel.Spielwelt;

/**
 *
 * @author Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 */
public class MainFrame extends javax.swing.JFrame {

    public static final MainFrame WINDOW = new MainFrame();

    private MainPanel mainPanel;
    private SpielPanel spielpanel;
    private TextPanel output;

    private final KeyListener keylistener = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent ke) {

        }

        @Override
        public void keyPressed(KeyEvent ke) {
            int button = InputConfig.translateKeyCode(ke.getKeyCode());
            if (button >= 0) {
                spiel.IO.IOMANAGER.ButtonPressed(button);
            }
        }

        @Override
        public void keyReleased(KeyEvent ke) {
            int button = InputConfig.translateKeyCode(ke.getKeyCode());
            if (button >= 0) {
                spiel.IO.IOMANAGER.ButtonReleased(button);
            }
        }
    };

    /**
     * Creates new form MainFrame
     */
    private MainFrame() {
        initComponents();
        soundCheckBox.setState(sound.Sound.isSoundOn());
        spiel.IO.IOMANAGER.addOutputListener(new OutputListener() {

            @Override
            public void outputEnd() {
                IO.IOMANAGER.println("Ausgabe fertig", IO.MessageType.DEBUG);
                output.setVisible(false);
                if (spielpanel != null) {
                    spielpanel.setPaused(false);
                }
            }
        });
        this.setLayout(null);
        output = new TextPanel();
    }

    public void setMainPanel(MainPanel p) {
        if (mainPanel != null) {
            mainPanel.removeKeyListener(keylistener);
            mainPanel.setSelected(false);
            this.remove(mainPanel);
        }
        mainPanel = p;
        if (mainPanel.getClass() == SpielPanel.class) {
            spielpanel = (SpielPanel) mainPanel;
            spielpanel.setOutput(output);
        }
        setMinimumSize(mainPanel.getMinimumSize());
        int width = this.getContentPane().getWidth();
        int height = this.getContentPane().getHeight();
        mainPanel.setBounds(0, 0, width, height);
        getContentPane().add(mainPanel);
        mainPanel.addKeyListener(keylistener);
        mainPanel.requestFocus();
        mainPanel.setSelected(true);
        repaint();
    }

    public boolean isPrinting() {
        return output.isPrinting();
    }

    public boolean isAsking() {
        // TODO implement input panel
        return false;
    }

    public void print(String txt) {
        output.print(txt);
        output.setVisible(true);
        if (spielpanel != null) {
            spielpanel.setPaused(true);
        }
        repaint();
    }

    public void printNext() {
        if (output.printNext()) {
            spiel.IO.IOMANAGER.outputEnd();
        }
        repaint();
    }

    @Override
    public void paintComponents(Graphics g) {
        super.paintComponents(g);
        if (output.isVisible()) {
            output.paintComponent(g);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        langBtnGrp = new javax.swing.ButtonGroup();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        reset = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        soundCheckBox = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        langDE = new javax.swing.JRadioButtonMenuItem();
        langEN = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jMenu1.setText("System");
        jMenu1.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N

        jMenuItem1.setText("Print Position");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });
        jMenu1.add(reset);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");
        jMenu2.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N

        jMenuItem3.setText("Configure Input");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        soundCheckBox.setSelected(true);
        soundCheckBox.setText("Sound");
        soundCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundCheckBoxActionPerformed(evt);
            }
        });
        jMenu2.add(soundCheckBox);

        jMenu3.setText("Language");

        langBtnGrp.add(langDE);
        langDE.setSelected(true);
        langDE.setText("Deutsch");
        langDE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                langDEActionPerformed(evt);
            }
        });
        jMenu3.add(langDE);

        langBtnGrp.add(langEN);
        langEN.setText("English");
        langEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                langENActionPerformed(evt);
            }
        });
        jMenu3.add(langEN);

        jMenu2.add(jMenu3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 226, Short.MAX_VALUE)
        );

        setBounds(0, 0, 375, 313);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Spieler s = Spielwelt.getCurrentWorld().getSpieler();
        IO.IOMANAGER.println("Position ist " + s.getX() + "|" + s.getY(), IO.MessageType.IMPORTANT);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        InputConfig.showInputConfigDialog(this);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void soundCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soundCheckBoxActionPerformed
        sound.Sound.setSoundOn(soundCheckBox.getState());
    }//GEN-LAST:event_soundCheckBoxActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        int width = this.getContentPane().getWidth();
        int height = this.getContentPane().getHeight();
        if (mainPanel != null) {
            mainPanel.setBounds(0, 0, width, height);
        }
        if (output != null) {
            output.setBounds(0, height * 3 / 4, width, height / 4);
        }
    }//GEN-LAST:event_formComponentResized

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        IO.IOMANAGER.flush();
        WINDOW.setMainPanel(new MainMenuPanel());
    }//GEN-LAST:event_resetActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (javax.swing.JOptionPane.showConfirmDialog(this, "Pokemon wirklich beenden?", "Pokemon beenden",
                javax.swing.JOptionPane.YES_NO_OPTION) == javax.swing.JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void langDEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_langDEActionPerformed
        try {
            Text.readLanguageFile(Text.LANG_FILE_DE);
        } catch (IOException ex) {
            IO.IOMANAGER.println("Cannot read language file DE", IO.MessageType.ERROR);
        }
    }//GEN-LAST:event_langDEActionPerformed

    private void langENActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_langENActionPerformed
        try {
            Text.readLanguageFile(Text.LANG_FILE_EN);
        } catch (IOException ex) {
            IO.IOMANAGER.println("Cannot read language file EN", IO.MessageType.ERROR);
        }
    }//GEN-LAST:event_langENActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.ButtonGroup langBtnGrp;
    private javax.swing.JRadioButtonMenuItem langDE;
    private javax.swing.JRadioButtonMenuItem langEN;
    private javax.swing.JMenuItem reset;
    private javax.swing.JCheckBoxMenuItem soundCheckBox;
    // End of variables declaration//GEN-END:variables
}
