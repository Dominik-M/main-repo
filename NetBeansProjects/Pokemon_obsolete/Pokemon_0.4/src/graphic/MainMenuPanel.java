/*
 * Copyright (C) 2015 Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package graphic;

import static graphic.MainFrame.WINDOW;
import java.awt.Color;
import java.awt.Graphics;
import spiel.InputListener;
import spiel.Spielwelt;

/**
 *
 * @author Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 */
public class MainMenuPanel extends MainPanel implements InputListener {

    final int CONTINUE_OPTION = 0, NEW_OPTION = 1, CONFIG_OPTION = 2;
    final String[] OPTION_TEXTS = new String[]{"Continue", "New game", "Options"};
    private final Spielwelt oldworld;
    int selectedOption;

    /**
     * Creates new form MenuPanel
     */
    public MainMenuPanel() {
        initComponents();
        oldworld = Spielwelt.loadFile("game.dat");
        if (oldworld == null) {
            OPTION_TEXTS[CONTINUE_OPTION] = "No game file found";
        }
        setSelectedOption(CONTINUE_OPTION);
    }

    @Override
    public void paintComponent(Graphics g) {
        int width = g.getClipBounds().width, height = g.getClipBounds().height;
        int hgap = width / 20, vgap = height / 12;
        g.setColor(spiel.Konstanten.BACKGROUND);
        g.fillRect(0, 0, width, height);
        g.setColor(Color.BLACK);
        g.drawRect(hgap, vgap, width - hgap * 2, height - vgap * 2);
        int x = hgap * 2, y = vgap * 2, cwidth = 16 * hgap, cheight = 2 * vgap;
        g.setFont(new java.awt.Font(spiel.Konstanten.DEFAULT_FONT_NAME, 0, vgap));
        if (this.selectedOption == CONTINUE_OPTION) {
            g.drawRect(x, y, cwidth, cheight);
        }
        g.drawString(OPTION_TEXTS[CONTINUE_OPTION], x + hgap, y + cheight - vgap / 2);
        y += vgap + cheight;
        g.drawString(OPTION_TEXTS[NEW_OPTION], x + hgap, y + cheight - vgap / 2);
        if (this.selectedOption == NEW_OPTION) {
            g.drawRect(x, y, cwidth, cheight);
        }
        y += vgap + cheight;
        g.drawString(OPTION_TEXTS[CONFIG_OPTION], x + hgap, y + cheight - vgap / 2);
        if (this.selectedOption == CONFIG_OPTION) {
            g.drawRect(x, y, cwidth, cheight);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 344, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 161, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void ButtonPressed(int button) {
        switch (button) {
            case UP:
                setSelectedOption(selectedOption - 1);
                break;
            case DOWN:
                setSelectedOption(selectedOption + 1);
                break;
            case A:
                switch (selectedOption) {
                    case NEW_OPTION:
                        Spielwelt spiel = Spielwelt.newWorld("Adolf");
                        WINDOW.setMainPanel(new SpielPanel(spiel));
                        break;
                    case CONTINUE_OPTION:
                        WINDOW.setMainPanel(new SpielPanel(oldworld));
                        sound.Sound.playSoundClip(oldworld.getOrt().getSoundFilename(), -1);
                        break;
                    case CONFIG_OPTION:
                        break;
                }
                break;
        }
    }

    @Override
    public void ButtonReleased(int button) {
    }

    private void setSelectedOption(int i) {
        if (i < CONTINUE_OPTION) {
            selectedOption = CONTINUE_OPTION;
        } else if (i > CONFIG_OPTION) {
            selectedOption = CONFIG_OPTION;
        } else {
            selectedOption = i;
        }
        if (oldworld == null && selectedOption == CONTINUE_OPTION) {
            selectedOption = NEW_OPTION;
        }
        repaint();
    }

    @Override
    protected void onSelect() {
    }

    @Override
    protected void onDisselect() {
    }
}
