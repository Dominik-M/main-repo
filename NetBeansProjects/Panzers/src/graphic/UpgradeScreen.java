/*
 * Copyright (C) 2015 Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package graphic;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JPanel;
import panzers.Gun;
import panzers.Tank;

/**
 *
 * @author Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 */
public class UpgradeScreen extends javax.swing.JDialog {

    private final Tank mTank;
    private boolean shiftPressed=false;

    public UpgradeScreen(Tank t) {
        setTitle("Tank Status");
        setModal(true);
        initComponents();
        mTank=t;
        updateLabels();
        JPanel tankPanel=new JPanel() {
            
            @Override
            public void paintComponent(Graphics g){
                Tank t=new Tank(1,1,1,1,mTank.width/2,mTank.height/2,Math.PI/2,mTank.width,mTank.height,mTank.getColor(),true);
                t.setGunImage(mTank.getGunImage());
                t.setTankImage(mTank.getTankImage());
                t.draw(g);
            }
        };
        tankPanel.setSize(jPanel1.getSize());
        jPanel1.add(tankPanel);
        this.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {}

            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode()==KeyEvent.VK_SHIFT)shiftPressed=true;
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if(e.getKeyCode()==KeyEvent.VK_SHIFT)shiftPressed=false;
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        gun1damage = new javax.swing.JLabel();
        gun1firerate = new javax.swing.JLabel();
        gun1range = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        gun2damage = new javax.swing.JLabel();
        gun2firerate = new javax.swing.JLabel();
        gun2range = new javax.swing.JLabel();
        bonuslabel = new javax.swing.JLabel();
        gunrate1 = new javax.swing.JButton();
        gundamage1 = new javax.swing.JButton();
        gunrange1 = new javax.swing.JButton();
        gunrate2 = new javax.swing.JButton();
        gundamage2 = new javax.swing.JButton();
        gunrange2 = new javax.swing.JButton();
        health = new javax.swing.JLabel();
        healthUp = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        accel = new javax.swing.JLabel();
        accelUp = new javax.swing.JButton();
        speed = new javax.swing.JLabel();
        speedUp = new javax.swing.JButton();
        gun1 = new javax.swing.JComboBox();
        gun2 = new javax.swing.JComboBox();
        ammo1 = new javax.swing.JLabel();
        ammo2 = new javax.swing.JLabel();
        ammoUp1 = new javax.swing.JButton();
        ammoUp2 = new javax.swing.JButton();
        accu1 = new javax.swing.JLabel();
        accu2 = new javax.swing.JLabel();
        accuUp1 = new javax.swing.JButton();
        accuUp2 = new javax.swing.JButton();
        buy = new javax.swing.JButton();
        level = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        jLabel10.setText("Weapons:");

        jLabel11.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        jLabel11.setText("Primary:");

        gun1damage.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gun1damage.setText("Damage: 1000000");

        gun1firerate.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gun1firerate.setText("Firerate:");

        gun1range.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gun1range.setText("Range:");

        jLabel12.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        jLabel12.setText("Secondary:");

        gun2damage.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gun2damage.setText("Damage: 1000000");

        gun2firerate.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gun2firerate.setText("Firerate:");

        gun2range.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gun2range.setText("Range:");

        bonuslabel.setFont(new java.awt.Font("Impact", 0, 16)); // NOI18N
        bonuslabel.setText("Available Bonus Points: 10");

        gunrate1.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gunrate1.setText("+");
        gunrate1.setToolTipText("+10%");
        gunrate1.setFocusable(false);
        gunrate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gunrate1ActionPerformed(evt);
            }
        });

        gundamage1.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gundamage1.setText("+");
        gundamage1.setToolTipText("+10%");
        gundamage1.setFocusable(false);
        gundamage1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gundamage1ActionPerformed(evt);
            }
        });

        gunrange1.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gunrange1.setText("+");
        gunrange1.setToolTipText("+10%");
        gunrange1.setFocusable(false);
        gunrange1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gunrange1ActionPerformed(evt);
            }
        });

        gunrate2.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gunrate2.setText("+");
        gunrate2.setToolTipText("+10%");
        gunrate2.setFocusable(false);
        gunrate2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gunrate2ActionPerformed(evt);
            }
        });

        gundamage2.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gundamage2.setText("+");
        gundamage2.setToolTipText("+10%");
        gundamage2.setFocusable(false);
        gundamage2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gundamage2ActionPerformed(evt);
            }
        });

        gunrange2.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gunrange2.setText("+");
        gunrange2.setToolTipText("+10%");
        gunrange2.setFocusable(false);
        gunrange2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gunrange2ActionPerformed(evt);
            }
        });

        health.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        health.setText("Health:");

        healthUp.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        healthUp.setText("+");
        healthUp.setToolTipText("+10%");
        healthUp.setFocusable(false);
        healthUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                healthUpActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 93, Short.MAX_VALUE)
        );

        accel.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        accel.setText("Acceleration:");

        accelUp.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        accelUp.setText("+");
        accelUp.setToolTipText("+10%");
        accelUp.setFocusable(false);
        accelUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accelUpActionPerformed(evt);
            }
        });

        speed.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        speed.setText("Max Speed:");

        speedUp.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        speedUp.setText("+");
        speedUp.setToolTipText("+10%");
        speedUp.setFocusable(false);
        speedUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedUpActionPerformed(evt);
            }
        });

        gun1.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gun1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gun1", "Gun2", "Gun3" }));
        gun1.setFocusable(false);
        gun1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gun1ActionPerformed(evt);
            }
        });

        gun2.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        gun2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gun1", "Gun2", "Gun3" }));
        gun2.setFocusable(false);
        gun2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gun2ActionPerformed(evt);
            }
        });

        ammo1.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        ammo1.setText("Ammo: 10000/10000 (MAX)");

        ammo2.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        ammo2.setText("Ammo: 10000 / 10000 (MAX)");

        ammoUp1.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        ammoUp1.setText("+");
        ammoUp1.setToolTipText("+10%");
        ammoUp1.setFocusable(false);
        ammoUp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ammoUp1ActionPerformed(evt);
            }
        });

        ammoUp2.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        ammoUp2.setText("+");
        ammoUp2.setToolTipText("+10%");
        ammoUp2.setFocusable(false);
        ammoUp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ammoUp2ActionPerformed(evt);
            }
        });

        accu1.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        accu1.setText("Accuracy: 100");

        accu2.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        accu2.setText("Accuracy: 100");

        accuUp1.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        accuUp1.setText("+");
        accuUp1.setToolTipText("+10%");
        accuUp1.setFocusable(false);
        accuUp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accuUp1ActionPerformed(evt);
            }
        });

        accuUp2.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        accuUp2.setText("+");
        accuUp2.setToolTipText("+10%");
        accuUp2.setFocusable(false);
        accuUp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accuUp2ActionPerformed(evt);
            }
        });

        buy.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        buy.setText("Buy new weapon");
        buy.setFocusable(false);
        buy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyActionPerformed(evt);
            }
        });

        level.setFont(new java.awt.Font("Impact", 0, 16)); // NOI18N
        level.setText("Level: 10");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bonuslabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(level))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(accu1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(accuUp1))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel11)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(health)
                                                .addComponent(speed)
                                                .addComponent(accel))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(healthUp, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(speedUp, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(accelUp)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(gun1range)
                                                .addComponent(gun1firerate)
                                                .addComponent(gun1damage)
                                                .addComponent(gun1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(ammo1))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(gunrange1)
                                                .addComponent(gunrate1)
                                                .addComponent(gundamage1)
                                                .addComponent(ammoUp1)))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(63, 63, 63)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(gun2firerate)
                                                    .addComponent(gun2range)
                                                    .addComponent(ammo2)
                                                    .addComponent(gun2damage)
                                                    .addComponent(accu2))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(gunrange2)
                                                    .addComponent(gunrate2)
                                                    .addComponent(gundamage2)
                                                    .addComponent(ammoUp2)
                                                    .addComponent(accuUp2)))
                                            .addComponent(gun2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(108, 108, 108)
                                .addComponent(buy)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bonuslabel)
                    .addComponent(level))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(healthUp)
                            .addComponent(health))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(accelUp)
                            .addComponent(accel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(speedUp)
                            .addComponent(speed)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gun1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gun1damage)
                            .addComponent(gundamage1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gun1firerate)
                            .addComponent(gunrate1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gun1range)
                            .addComponent(gunrange1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ammo1)
                            .addComponent(ammoUp1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gun2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gundamage2)
                            .addComponent(gun2damage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gunrate2)
                            .addComponent(gun2firerate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gunrange2)
                            .addComponent(gun2range))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ammoUp2)
                            .addComponent(ammo2))))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accuUp2)
                    .addComponent(accu2)
                    .addComponent(accuUp1)
                    .addComponent(accu1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buy)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
            dispose();
    }//GEN-LAST:event_formKeyPressed

    private void gunrate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gunrate1ActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.getPrimWeapon()!=null && mTank.getBonusPoints()>0){
          Gun g=mTank.getPrimWeapon();
          if(g.increaseFirerate(0.1)){
            mTank.spendPoints(1);
            updateLabels();
          }
        }
    }//GEN-LAST:event_gunrate1ActionPerformed

    private void gundamage1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gundamage1ActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.getPrimWeapon()!=null && mTank.getBonusPoints()>0){
          Gun g=mTank.getPrimWeapon();
          if(g.increaseDamage(0.1)){
            mTank.spendPoints(1);
            updateLabels();
          }
        }
    }//GEN-LAST:event_gundamage1ActionPerformed

    private void gunrange1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gunrange1ActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.getPrimWeapon()!=null && mTank.getBonusPoints()>0){
          Gun g=mTank.getPrimWeapon();
          if(g.increaseRange(0.1)){
            mTank.spendPoints(1);
            updateLabels();
          }
        }
    }//GEN-LAST:event_gunrange1ActionPerformed

    private void gunrate2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gunrate2ActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.getSecWeapon()!=null && mTank.getBonusPoints()>0){
          Gun g=mTank.getSecWeapon();
          if(g.increaseFirerate(0.1)){
            mTank.spendPoints(1);
            updateLabels();
          }
        }
    }//GEN-LAST:event_gunrate2ActionPerformed

    private void gundamage2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gundamage2ActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.getSecWeapon()!=null && mTank.getBonusPoints()>0){
          Gun g=mTank.getSecWeapon();
          if(g.increaseDamage(0.1)){
            mTank.spendPoints(1);
            updateLabels();
          }
        }
    }//GEN-LAST:event_gundamage2ActionPerformed

    private void gunrange2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gunrange2ActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.getSecWeapon()!=null && mTank.getBonusPoints()>0){
          Gun g=mTank.getSecWeapon();
          if(g.increaseRange(0.1)){
            mTank.spendPoints(1);
            updateLabels();
          }
        }
    }//GEN-LAST:event_gunrange2ActionPerformed

    private void healthUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_healthUpActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.increaseHP(0.2))
          updateLabels();
    }//GEN-LAST:event_healthUpActionPerformed

    private void accelUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accelUpActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.increaseAcceleration(0.5)){
          updateLabels();
        }
    }//GEN-LAST:event_accelUpActionPerformed

    private void speedUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedUpActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.increaseMaxSpeed(0.5))
          updateLabels();
    }//GEN-LAST:event_speedUpActionPerformed

    private void gun1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gun1ActionPerformed
        mTank.switchGuns(0, gun1.getSelectedIndex());
        updateLabels();
    }//GEN-LAST:event_gun1ActionPerformed

    private void gun2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gun2ActionPerformed
        mTank.switchGuns(1, gun2.getSelectedIndex());
        updateLabels();
    }//GEN-LAST:event_gun2ActionPerformed

    private void ammoUp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ammoUp1ActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.getPrimWeapon()!=null && mTank.getBonusPoints()>0){
            if(mTank.getPrimWeapon().increaseAmmo(0.2)){
                mTank.spendPoints(1);
                updateLabels();
            }
        }
    }//GEN-LAST:event_ammoUp1ActionPerformed

    private void ammoUp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ammoUp2ActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.getSecWeapon()!=null && mTank.getBonusPoints()>0){
            if(mTank.getSecWeapon().increaseAmmo(0.2)){
                mTank.spendPoints(1);
                updateLabels();
            }
        }
    }//GEN-LAST:event_ammoUp2ActionPerformed

    private void accuUp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accuUp1ActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.getPrimWeapon()!=null && mTank.getBonusPoints()>0){
            if(mTank.getPrimWeapon().increaseAccuracy(1.1)){
                mTank.spendPoints(1);
                updateLabels();
            }
        }
    }//GEN-LAST:event_accuUp1ActionPerformed

    private void accuUp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accuUp2ActionPerformed
        int count=1;
        if(shiftPressed)count=10;
        for(int i=0; i<count; i++)
        if(mTank.getSecWeapon()!=null && mTank.getBonusPoints()>0){
            if(mTank.getSecWeapon().increaseAccuracy(1.1)){
                mTank.spendPoints(1);
                updateLabels();
            }
        }
    }//GEN-LAST:event_accuUp2ActionPerformed

    @SuppressWarnings("empty-statement")
    private void buyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyActionPerformed
        while(new GunShop(this.getLocation(),mTank).isVisible());
        updateLabels();
    }//GEN-LAST:event_buyActionPerformed

    public static int show(int x, int y,Tank t) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpgradeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpgradeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpgradeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpgradeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        UpgradeScreen screen = new UpgradeScreen(t);
        screen.setLocation(x, y);
        screen.setVisible(true);
        while (screen.isVisible());
        return screen.mTank.getBonusPoints();
    }
    
    public static String round(double d,int n){
        String s=String.valueOf(d);
        int i=s.indexOf(".")+1;
        if(s.length()-i>n){
            return s.substring(0, i+n);
        }
        else return s;
    }
    
    public final void updateLabels(){
        bonuslabel.setText("Available Bonus Points: "+mTank.getBonusPoints());
        level.setText("Level: "+mTank.getLevel());
        health.setText("Health: "+mTank.getHP()+" / "+mTank.getMaxHP());
        if((int)mTank.getAcceleration()==(int)Tank.MAX_ACCELERATION)
          accel.setText("Acceleration: "+(int)mTank.getAcceleration()+" (MAX)");
        else
          accel.setText("Acceleration: "+(int)mTank.getAcceleration());
        if((int)mTank.getMaxSpeed()==(int)Tank.MAX_SPEED)
          speed.setText("Max Speed: "+(int)mTank.getMaxSpeed()+" (MAX)");
        else
            speed.setText("Max Speed: "+(int)mTank.getMaxSpeed());
        Gun g=mTank.getPrimWeapon();
        if(g!=null){
            Gun[] guns=mTank.getGuns();
            gun1.setModel(new javax.swing.DefaultComboBoxModel(guns));
            gun1.setSelectedItem(g);
            if((int)g.getDamage()==(int)g.MAX_DAMAGE)
              gun1damage.setText("Damage: "+round(g.getDamage(),2)+" (MAX)");
            else 
                gun1damage.setText("Damage: "+round(g.getDamage(),2));
            if((int)(g.getFirerate()) == (int)g.MAX_FIRERATE)
              gun1firerate.setText("Firerate: "+round(g.getFirerate(),2)+" (MAX)");
            else
              gun1firerate.setText("Firerate: "+round(g.getFirerate(),2));
            if((int)(g.getRange())==(int)(g.MAX_RANGE))
              gun1range.setText("Range: "+g.getRange()+" (MAX)");
            else
              gun1range.setText("Range: "+g.getRange());
            if((int)(g.getMaxAmmo())==(int)g.MAX_AMMO)
              ammo1.setText("Ammo: "+g.getAmmo()+" / "+g.getMaxAmmo()+" (MAX)");
            else
              ammo1.setText("Ammo: "+g.getAmmo()+" / "+g.getMaxAmmo());
            if((int)(g.getAccuracy())==g.MAX_ACCURACY)
              accu1.setText("Accuracy: "+round(g.getAccuracy(),2)+" (MAX)");
            else
              accu1.setText("Accuracy: "+round(g.getAccuracy(),2));
        }else{
            gun1.setModel(new javax.swing.DefaultComboBoxModel(new Gun[]{}));
            gun1damage.setText("Damage: ---");
            gun1firerate.setText("Firerate: ---");
            gun1range.setText("Range: ---");
            ammo1.setText("Ammo: ---/---");
            accu1.setText("Accuracy: ---");
        }
        g=mTank.getSecWeapon();
        if(g!=null){
            Gun[] guns=mTank.getGuns();
            gun2.setModel(new javax.swing.DefaultComboBoxModel(guns));
            gun2.setSelectedItem(g);
            if((int)g.getDamage()==(int)g.MAX_DAMAGE)
              gun2damage.setText("Damage: "+round(g.getDamage(),2)+" (MAX)");
            else 
                gun2damage.setText("Damage: "+round(g.getDamage(),2));
            if((int)(g.getFirerate()) == (int)g.MAX_FIRERATE)
              gun2firerate.setText("Firerate: "+round(g.getFirerate(),2)+" (MAX)");
            else
              gun2firerate.setText("Firerate: "+round(g.getFirerate(),2));
            if((int)(g.getRange())==(int)(g.MAX_RANGE))
              gun2range.setText("Range: "+g.getRange()+" (MAX)");
            else
              gun2range.setText("Range: "+g.getRange());
            if((int)(g.getMaxAmmo())==(int)g.MAX_AMMO)
              ammo2.setText("Ammo: "+g.getAmmo()+" / "+g.getMaxAmmo()+" (MAX)");
            else
              ammo2.setText("Ammo: "+g.getAmmo()+" / "+g.getMaxAmmo());
            if((int)(g.getAccuracy())==g.MAX_ACCURACY)
              accu2.setText("Accuracy: "+round(g.getAccuracy(),2)+" (MAX)");
            else
              accu2.setText("Accuracy: "+round(g.getAccuracy(),2));
        }else{
            gun2.setModel(new javax.swing.DefaultComboBoxModel(new Gun[]{}));
            gun2damage.setText("Damage: ---");
            gun2firerate.setText("Firerate: ---");
            gun2range.setText("Range: ---");
            ammo2.setText("Ammo: ---/---");
            accu2.setText("Accuracy: ---");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accel;
    private javax.swing.JButton accelUp;
    private javax.swing.JLabel accu1;
    private javax.swing.JLabel accu2;
    private javax.swing.JButton accuUp1;
    private javax.swing.JButton accuUp2;
    private javax.swing.JLabel ammo1;
    private javax.swing.JLabel ammo2;
    private javax.swing.JButton ammoUp1;
    private javax.swing.JButton ammoUp2;
    private javax.swing.JLabel bonuslabel;
    private javax.swing.JButton buy;
    private javax.swing.JComboBox gun1;
    private javax.swing.JLabel gun1damage;
    private javax.swing.JLabel gun1firerate;
    private javax.swing.JLabel gun1range;
    private javax.swing.JComboBox gun2;
    private javax.swing.JLabel gun2damage;
    private javax.swing.JLabel gun2firerate;
    private javax.swing.JLabel gun2range;
    private javax.swing.JButton gundamage1;
    private javax.swing.JButton gundamage2;
    private javax.swing.JButton gunrange1;
    private javax.swing.JButton gunrange2;
    private javax.swing.JButton gunrate1;
    private javax.swing.JButton gunrate2;
    private javax.swing.JLabel health;
    private javax.swing.JButton healthUp;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel level;
    private javax.swing.JLabel speed;
    private javax.swing.JButton speedUp;
    // End of variables declaration//GEN-END:variables
}
