/*
 * Copyright (C) 2015 Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package graphic;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.image.FilteredImageSource;
import java.awt.image.ImageFilter;
import java.awt.image.ImageProducer;
import java.awt.image.RGBImageFilter;
import javax.swing.Timer;
import panzers.Box;
import panzers.Gun;
import panzers.ItemEffect;
import panzers.Obstacle;
import panzers.Tank;
import static panzers.Tank.getStandartTank;
import panzers.TankKI;

/**
 *
 * @author Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 */
public class GUI extends javax.swing.JFrame {
    
    private final int maxTankCount=5;
    private final int enemySpawnChance=100;

    static void startSinglePlayerMode() {
        GUI gui=start();
       gui.game.setTank(Tank.getStandartTank((int)gui.game.BOUNDS.getWidth()/2, (int)gui.game.BOUNDS.getHeight()/2, true));
    //    gui.game.setTank(Tank.getPlane(true));
        gui.twoplayer.setSelected(false);
        gui.coop.setSelected(true);
        gui.setVisible(true);
    }

    static void startCoopMode() {
        GUI gui=start();
        gui.game.setTank(Tank.getStandartTank((int)gui.game.BOUNDS.getWidth()/2, (int)gui.game.BOUNDS.getHeight()/2, true));
        gui.game.setTank2(Tank.getStandartTank((int)gui.game.BOUNDS.getWidth()/3, (int)gui.game.BOUNDS.getHeight()/2, true));
        gui.twoplayer.setSelected(true);
        gui.coop.setSelected(true);
        gui.setVisible(true);
    }

    static void startDuellMode() {
        GUI gui=start();
        Tank t=Tank.getDuellTank((int)gui.game.BOUNDS.getWidth()/4, (int)gui.game.BOUNDS.getHeight()/2, true);
        t.addGuns(getRandomGun(7));
        gui.game.setTank2(t);
        t=Tank.getDuellTank(3*(int)gui.game.BOUNDS.getWidth()/4, (int)gui.game.BOUNDS.getHeight()/2, false);
        t.addGuns(getRandomGun(7));
        gui.game.setTank(t);
        gui.twoplayer.setSelected(true);
        gui.coop.setSelected(false);
        gui.auto.setSelected(true);
        gui.autoActionPerformed(null);
        gui.enemySpawnTimer.stop();
        gui.setVisible(true);
    }

    private Timer enemySpawnTimer,boxSpawnTimer;
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        super("Panzers");
        initComponents();
//        Tank t=getSuperTank(game.BOUNDS.getWidth()/2,(int)game.BOUNDS.getHeight()/2,true);
//        game.setTank(t);
//        t=getSuperTank(game.BOUNDS.getWidth()/3,(int)game.BOUNDS.getHeight()/2,false);
//        game.setTank2(t);
//     //   System.out.println(mTank.getValue());
        game.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        game = new graphic.SpielfeldPanel();
        fps = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        respawn = new javax.swing.JButton();
        addBox = new javax.swing.JButton();
        addEnemy = new javax.swing.JButton();
        level = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        auto = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        respawnRate = new javax.swing.JSlider();
        addFriend = new javax.swing.JButton();
        restart = new javax.swing.JButton();
        respawnRate1 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        wall = new javax.swing.JButton();
        twoplayer = new javax.swing.JCheckBox();
        coop = new javax.swing.JCheckBox();
        ammoOn = new javax.swing.JCheckBox();
        healthOn = new javax.swing.JCheckBox();
        expOn = new javax.swing.JCheckBox();
        pLevel = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout gameLayout = new javax.swing.GroupLayout(game);
        game.setLayout(gameLayout);
        gameLayout.setHorizontalGroup(
            gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );
        gameLayout.setVerticalGroup(
            gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        fps.setMajorTickSpacing(10);
        fps.setMinimum(10);
        fps.setMinorTickSpacing(10);
        fps.setPaintLabels(true);
        fps.setPaintTicks(true);
        fps.setFocusable(false);
        fps.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpsStateChanged(evt);
            }
        });

        jLabel1.setText("FPS:");

        respawn.setText("Respawn");
        respawn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respawnActionPerformed(evt);
            }
        });

        addBox.setText("Add Box");
        addBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBoxActionPerformed(evt);
            }
        });

        addEnemy.setText("Add Enemy");
        addEnemy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEnemyActionPerformed(evt);
            }
        });

        level.setMajorTickSpacing(10);
        level.setMaximum(99);
        level.setMinorTickSpacing(1);
        level.setPaintLabels(true);
        level.setPaintTicks(true);
        level.setValue(10);

        jLabel9.setText("KI level:");

        auto.setText("Autospawn");
        auto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoActionPerformed(evt);
            }
        });

        jLabel13.setText("Enemy spawn delay:");

        respawnRate.setMajorTickSpacing(5000);
        respawnRate.setMaximum(10000);
        respawnRate.setMinimum(100);
        respawnRate.setMinorTickSpacing(100);
        respawnRate.setPaintTicks(true);
        respawnRate.setValue(2500);
        respawnRate.setFocusable(false);
        respawnRate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                respawnRateStateChanged(evt);
            }
        });

        addFriend.setText("Add Friend");
        addFriend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFriendActionPerformed(evt);
            }
        });

        restart.setText("Restart");
        restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartActionPerformed(evt);
            }
        });

        respawnRate1.setMajorTickSpacing(5000);
        respawnRate1.setMaximum(10000);
        respawnRate1.setMinimum(100);
        respawnRate1.setMinorTickSpacing(100);
        respawnRate1.setPaintTicks(true);
        respawnRate1.setValue(2500);
        respawnRate1.setFocusable(false);
        respawnRate1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                respawnRate1StateChanged(evt);
            }
        });

        jLabel2.setText("Box spawn delay:");

        wall.setText("Add Wall");
        wall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wallActionPerformed(evt);
            }
        });

        twoplayer.setSelected(true);
        twoplayer.setText("2 Player");
        twoplayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoplayerActionPerformed(evt);
            }
        });

        coop.setText("Coop Mode");
        coop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coopActionPerformed(evt);
            }
        });

        ammoOn.setSelected(true);
        ammoOn.setText("Ammo");
        ammoOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ammoOnActionPerformed(evt);
            }
        });

        healthOn.setSelected(true);
        healthOn.setText("Health");

        expOn.setSelected(true);
        expOn.setText("Exp");

        pLevel.setText("Use Players Level");
        pLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pLevelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(game, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1))
                            .addGap(87, 87, 87))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)
                                .addComponent(jLabel13)
                                .addComponent(respawnRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(respawnRate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(auto)
                                .addComponent(twoplayer)
                                .addComponent(coop)
                                .addComponent(ammoOn)
                                .addComponent(healthOn)
                                .addComponent(expOn)
                                .addComponent(pLevel))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(restart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(respawn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(addBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addEnemy))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(wall)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addFriend))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(pLevel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(twoplayer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(coop)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(auto))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(respawnRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(expOn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(respawnRate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(respawn)
                                    .addComponent(addBox)
                                    .addComponent(addEnemy))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(addFriend)
                                    .addComponent(restart)
                                    .addComponent(wall)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ammoOn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(healthOn)))
                        .addGap(0, 136, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(game, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fpsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpsStateChanged
        game.setFPS(fps.getValue());
    }//GEN-LAST:event_fpsStateChanged

    private void respawnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respawnActionPerformed
        Tank neu=Tank.getStandartTank((int)game.BOUNDS.getWidth()/2,(int)game.BOUNDS.getHeight()/2,true);
        game.setTank(neu);
        if(twoplayer.isSelected())
            game.setTank2(getStandartTank((int)game.BOUNDS.getWidth()/3,(int)game.BOUNDS.getHeight()/2,coop.isSelected()));
    }//GEN-LAST:event_respawnActionPerformed

    private void addEnemyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEnemyActionPerformed
        addRandomTankKI(level.getValue(),false);
    }//GEN-LAST:event_addEnemyActionPerformed

    private void autoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoActionPerformed
        if(auto.isSelected()){
            enemySpawnTimer=new Timer(respawnRate.getValue(), (ActionEvent e) -> {
                if(pLevel.isSelected())level.setValue(game.getTank().getLevel());
                if(game.getEnemys(true).length<maxTankCount && Math.random()*100<=enemySpawnChance)
                  addRandomTankKI(level.getValue(),false);
                else if(game.getEnemys(false).length<maxTankCount+2)
                    addRandomTankKI(level.getValue(),true);
            });
            enemySpawnTimer.start();
            boxSpawnTimer=new Timer(respawnRate1.getValue(), (ActionEvent e) -> {
                if(Math.random()*10<=5)
                    addBoxActionPerformed(evt);
            });
            boxSpawnTimer.start();
        }else{
            enemySpawnTimer.stop();
            boxSpawnTimer.stop();
        }
    }//GEN-LAST:event_autoActionPerformed

    private void addBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBoxActionPerformed
        int width=50, height=50;
        int x=(int)(Math.random()*((int)game.BOUNDS.getWidth()-width)+width);
        int y=(int)(Math.random()*((int)game.BOUNDS.getHeight()-height)+height);
        int sel=(int)(Math.random()*4);
        ItemEffect e=null;
        if(sel<=1 && ammoOn.isSelected())e=ItemEffect.AMMO;
        else if(sel<=2 && healthOn.isSelected())e=ItemEffect.HEALTH;
        else if(expOn.isSelected()) e=ItemEffect.EXP;
        Box b=new Box(x,y,width,height,60,e);
        game.addBox(b);
    }//GEN-LAST:event_addBoxActionPerformed

    private void respawnRateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_respawnRateStateChanged
        if(enemySpawnTimer!=null ){
          enemySpawnTimer.setDelay(respawnRate.getValue());
          if(auto.isSelected())
            enemySpawnTimer.restart();
        }
    }//GEN-LAST:event_respawnRateStateChanged

    private void addFriendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFriendActionPerformed
        addRandomTankKI(level.getValue(),true);
    }//GEN-LAST:event_addFriendActionPerformed

    private void restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartActionPerformed
        game.reset();
        respawnActionPerformed(evt);
    }//GEN-LAST:event_restartActionPerformed

    private void respawnRate1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_respawnRate1StateChanged
        if(boxSpawnTimer!=null ){
          boxSpawnTimer.setDelay(respawnRate1.getValue());
          if(auto.isSelected())
            boxSpawnTimer.restart();
        }
    }//GEN-LAST:event_respawnRate1StateChanged

    private void wallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wallActionPerformed
        int width, height;
        if(Math.random()>=0.5){
            width=20;
            height=100;
        }else{
            width=100;
            height=20;
        }
        int x=(int)(Math.random()*((int)game.BOUNDS.getWidth()-2*width)+width);
        int y=(int)(Math.random()*((int)game.BOUNDS.getHeight()-2*height)+height);
        game.addObstacle(new Obstacle(new java.awt.Rectangle(x, y, width, height),200));
    }//GEN-LAST:event_wallActionPerformed

    private void twoplayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoplayerActionPerformed
        if(twoplayer.isSelected()){
            game.setTank2(getStandartTank((int)game.BOUNDS.getWidth()/3,(int)game.BOUNDS.getHeight()/2,coop.isSelected()));
        }else{
            game.setTank2(null);
        }
    }//GEN-LAST:event_twoplayerActionPerformed

    private void coopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coopActionPerformed
        
    }//GEN-LAST:event_coopActionPerformed

    private void ammoOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ammoOnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ammoOnActionPerformed

    private void pLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pLevelActionPerformed
        if(pLevel.isSelected()){
          level.setValue(game.getTank().getLevel());
          level.setEnabled(false);
        }
        else level.setEnabled(true);
    }//GEN-LAST:event_pLevelActionPerformed

    
    
    public void addRandomTankKI(int kiLevel,boolean friendly){
        int w=(int)(Math.random()*10+25);
        int h=(int)(Math.random()*25+35);
        int x=(int)(Math.random()*((int)game.BOUNDS.getWidth()-w)+w);
        int y=(int)(Math.random()*((int)game.BOUNDS.getHeight()-h)+h);
        double dir=Math.random()*Math.PI;
        int a=(int)(Math.random()*100+100);
        int speedmax=(int)(Math.random()*200+100);
        double rotspeed=Math.random()*Math.PI+Math.PI;
        Color c;
        if(friendly)c=Color.BLUE.brighter();
        else c=Color.red.brighter();
        Tank t=new Tank((w+h)/5+kiLevel,a,speedmax,
                rotspeed,x,y,dir,w,h,c,friendly,getRandomGun(kiLevel/4));
        for(int i=1; i<kiLevel;i++)t.addExp(50*i);
        game.addKI(new TankKI(t,kiLevel));
    }
    
    public static GUI start() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        return new GUI();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBox;
    private javax.swing.JButton addEnemy;
    private javax.swing.JButton addFriend;
    private javax.swing.JCheckBox ammoOn;
    private javax.swing.JCheckBox auto;
    private javax.swing.JCheckBox coop;
    private javax.swing.JCheckBox expOn;
    private javax.swing.JSlider fps;
    private graphic.SpielfeldPanel game;
    private javax.swing.JCheckBox healthOn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSlider level;
    private javax.swing.JCheckBox pLevel;
    private javax.swing.JButton respawn;
    private javax.swing.JSlider respawnRate;
    private javax.swing.JSlider respawnRate1;
    private javax.swing.JButton restart;
    private javax.swing.JCheckBox twoplayer;
    private javax.swing.JButton wall;
    // End of variables declaration//GEN-END:variables

    private static Gun[] getRandomGun(int kiLevel) {
        int random;
        int count=(int) (Math.random()*2);
        Gun[] guns = new Gun[count+1];
        for(int i=0; i<guns.length; i++){
          random=(int) (Math.random()*kiLevel);
          switch(random){
            case 0:
                guns[i]=Gun.getSmallGun();
                break;
            case 1:
                guns[i]=Gun.getMachineGun();
                break;
            case 2:
                guns[i]=Gun.getGrenadeLauncher();
                break;
            case 3:
                guns[i]=Gun.getRicochetRifle();
                break;
            case 4:
                guns[i]=Gun.getFlamethrower();
                break;
            case 5:
                guns[i]=Gun.getLaser();
                break;
//            case 6:
//                guns[i]=Gun.getRocketLauncher();
//                break;
            default:
                guns[i]=Gun.getGatlinGun();
                break;
          }
        }
        return guns;
    }
    
    public static Image makeColorTransparent(Image im, final Color color) {
        ImageFilter filter = new RGBImageFilter() {
            // the color we are looking for... Alpha bits are set to opaque
            public int markerRGB = color.getRGB() | 0xFF000000;

            @Override
            public final int filterRGB(int x, int y, int rgb) {
                if ((rgb | 0xFF000000) == markerRGB) {
                    // Mark the alpha bits as zero - transparent
                    return 0x00FFFFFF & rgb;
                } else {
                    // nothing to do
                    return rgb;
                }
            }
        };

        ImageProducer ip = new FilteredImageSource(im.getSource(), filter);
        return Toolkit.getDefaultToolkit().createImage(ip);
    }
}
