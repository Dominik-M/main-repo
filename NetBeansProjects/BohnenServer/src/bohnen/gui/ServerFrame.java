package bohnen.gui;

import bohnen.Bohnanza;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import utils.Arbeiter;
import utils.ArbeiterListener;

/**
 *
 * @author Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 */
public class ServerFrame extends javax.swing.JFrame implements Runnable,ArbeiterListener{
    private boolean running=false;
    private final List<Arbeiter> user;
    private ServerSocket server;
    private SpielbrettKonsole spielbrett;
    private Bohnanza spiel;
   
    /**
     * Creates new form ServerFrame
     */
    public ServerFrame() {
        setTitle("Bohnanza Server");
        initComponents();
        user=new java.util.concurrent.CopyOnWriteArrayList<>();
        updateList();
        newgame.setEnabled(running);
        jLabel2.setText("Server is not running");
    }
    
    public final void updateList(){
        users.setText("Connected Users:");
        String names="";
        for(Arbeiter a: user){
            users.append("\n"+a);
            names=names+a.toString()+";";
        }
        hatGesagt("#userlist"+names);
    }
    
    public void addUser(Arbeiter neu){
        user.add(neu);
        while(neu.toString()==null);
        sendAt(neu,"Hallo! Willkommen im Chat");
        updateList();
    }
    
    public void removeUser(String name){
        for(Arbeiter a: user)
            if(a.toString().equals(name)){
                user.remove(a);
                a.send("#kick");
                a.close();
                updateList();
            }
    }
    
    public void close() {
        hatGesagt("Server closed");
        try {
            server.close();
        } catch (IOException ex) {
            Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Server is not running");
        start.setText("Start Server");
        running = false;
        newgame.setEnabled(false);
        for (Arbeiter a : user) {
            removeUser(a.toString());
        }
        if(spiel!=null){
            spielbrett.dispose();
            spiel=null;
            spielbrett=null;
        }
    }
    
    public void sendAt(Arbeiter a, String text){
        a.send("Server: "+text);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hostIP = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        start = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        users = new javax.swing.JTextArea();
        newgame = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        hostIP.setText("Host IP: localhost");

        jLabel1.setText("Port: ");

        port.setText("52712");
        port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portActionPerformed(evt);
            }
        });

        start.setText("Start Server");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        users.setEditable(false);
        users.setColumns(20);
        users.setRows(5);
        users.setText("Connected Users:");
        jScrollPane1.setViewportView(users);

        newgame.setText("Start Game");
        newgame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newgameActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Server is not running 999.999.999.999:99999");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(newgame))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hostIP)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(start)))
                        .addGap(9, 9, 9))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostIP)
                    .addComponent(jLabel1)
                    .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(start))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newgame)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void portActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portActionPerformed
        startActionPerformed(evt);
    }//GEN-LAST:event_portActionPerformed

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        if(!running){
            try {
                server=new ServerSocket(Integer.parseInt(port.getText()));
                new Thread(this).start();
            } catch (IOException ex) {
                Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
          
        }else{
          close();
        }
        
    }//GEN-LAST:event_startActionPerformed

    private void newgameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newgameActionPerformed
        if(user.size()!=3){
            javax.swing.JOptionPane.showMessageDialog(this, "3 connected users are needed to start a game.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }else if(spielbrett==null){
            Arbeiter[] arbeiter=new Arbeiter[user.size()];
            for(int i=0; i<arbeiter.length; i++){
                arbeiter[i]=user.get(i);
                arbeiter[i].removeListener(this);
            }
            spielbrett=new SpielbrettKonsole(arbeiter,user.get(0).toString(), user.get(1).toString(), user.get(2).toString());
            spielbrett.setVisible(true);
        }
    }//GEN-LAST:event_newgameActionPerformed

    @Override
    public void run() {
        try {
            String host=server.getInetAddress().getHostAddress()+":"+server.getLocalPort();
            jLabel2.setForeground(new java.awt.Color(0, 200, 0));
            jLabel2.setText("Server is running on "+host);
            start.setText("Stop");
            hatGesagt(host);
            running=true;
            newgame.setEnabled(true);
            while (server!=null && !server.isClosed() && running) {
                Socket socket = server.accept();
                if(spiel!=null){
                    socket.close();
                    continue;
                }
                Arbeiter neu = new Arbeiter(socket, this);
                neu.start();
                addUser(neu);
            }
            close();
        } catch (Exception ex) {
            System.out.println("Fehler: "+ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel hostIP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newgame;
    private javax.swing.JTextField port;
    private javax.swing.JButton start;
    private javax.swing.JTextArea users;
    // End of variables declaration//GEN-END:variables

    @Override
    public void hatGesagt(String text) {
        System.out.println(text);
        for(Arbeiter a: user){
          a.send(text);
        }
    }

    @Override
    public void feuern(Arbeiter a) {
        removeUser(a.toString());
    }
}
