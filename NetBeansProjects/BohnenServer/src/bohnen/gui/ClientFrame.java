package bohnen.gui;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 */
public class ClientFrame extends javax.swing.JFrame implements Runnable{
    private String[] names;
    private Socket socket;
    private BufferedReader vomserver;
    private PrintWriter zumserver;

    public ClientFrame() {
        setTitle("Bohnanza Client");
        initComponents();
        ipIn.setText("localhost");
        names=new String[]{};
        updateList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameIn = new javax.swing.JTextField();
        ipIn = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        portIn = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        send = new javax.swing.JButton();
        input = new javax.swing.JTextField();
        connect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("IP Adresse:");

        jLabel2.setText("Name:");

        nameIn.setText("Dein Name");
        nameIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameInActionPerformed(evt);
            }
        });

        ipIn.setText("255.255.255.255");
        ipIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipInActionPerformed(evt);
            }
        });

        jLabel3.setText("Port:");

        portIn.setText("52712");
        portIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portInActionPerformed(evt);
            }
        });

        output.setEditable(false);
        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        userList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Username 1", "Username 2" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(userList);

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        connect.setText("Connect");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ipIn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(portIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(connect))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(input)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(send))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(ipIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(portIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(send)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        if(socket==null)
          new Thread(this).start();
        else disconnect();
    }//GEN-LAST:event_connectActionPerformed

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        send(input.getText());
        input.setText("");
    }//GEN-LAST:event_inputActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        inputActionPerformed(evt);
    }//GEN-LAST:event_sendActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(socket!=null) disconnect();
    }//GEN-LAST:event_formWindowClosing

    private void nameInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameInActionPerformed
       connectActionPerformed(evt);
    }//GEN-LAST:event_nameInActionPerformed

    private void ipInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipInActionPerformed
        connectActionPerformed(evt);
    }//GEN-LAST:event_ipInActionPerformed

    private void portInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portInActionPerformed
        connectActionPerformed(evt);
    }//GEN-LAST:event_portInActionPerformed

    private boolean connect(String name, String adress, int port) {
        try {
            print("Verbindung wird hergestellt...");
            socket=new Socket(adress,port);
            zumserver=new PrintWriter(socket.getOutputStream(), true);
            vomserver=new BufferedReader(new InputStreamReader(socket.getInputStream()));
            Thread.sleep(100);
            send("#name"+name);
        } catch (IOException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } catch (InterruptedException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        connect.setText("Disconnect");
        return true;
    }
    
    private void disconnect(){
        try {
            socket.close();
            zumserver.close();
            vomserver.close();
            socket=null;
            connect.setText("Connect");
            print("Verbindung unterbrochen.");
        } catch (IOException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void print(String text){
      output.append(text+"\n");
    }
    
    public final void updateList(){
        userList.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return names.length; }
            public Object getElementAt(int i) { return names[i]; }
        });
        pack();
    }
    
     @Override
  public void run(){
         if (connect(nameIn.getText(), ipIn.getText(), Integer.parseInt(portIn.getText()))) {
             print("verbunden mit " + socket.toString());
             while (socket!=null && !socket.isClosed()) {
                 String text;
                 try {
                     text = vomserver.readLine();
                 } catch (Exception ex) {
                     System.out.println("Fehler: "+ex);
                     continue;
                 }
                 if (text.equals("#kick")) {
                     disconnect();
                     break;
                 }else if(text.startsWith("#userlist")){
                     java.util.LinkedList<String> nameList=new java.util.LinkedList<>();
                     int index=9;
                     while(index<text.length()){
                         int nextIndex=text.indexOf(";", index);
                         if(nextIndex<0)break;
                         String name=text.substring(index, nextIndex);
                         nameList.add(name);
                         index=nextIndex+1;
                     }
                     names=new String[nameList.size()];
                     for(int i=0; i<names.length; i++)names[i]=nameList.get(i);
                     updateList();
                 }else if(text.startsWith("#start")){
                     int spielerindex=Integer.parseInt(text.substring(6));
                     new SpielbrettClient(socket,zumserver,vomserver,spielerindex,names).setVisible(true);
                     break;
                 }
                 else print(text);
             }
             dispose();
         }else{
             print("Es konnte keine Verbindung hergestellt werden.");
         }
  }
  
  public void send(String text){
    if(socket!=null && !socket.isClosed())
      zumserver.println(text);
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connect;
    private javax.swing.JTextField input;
    private javax.swing.JTextField ipIn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameIn;
    private javax.swing.JTextArea output;
    private javax.swing.JTextField portIn;
    private javax.swing.JButton send;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables
}
