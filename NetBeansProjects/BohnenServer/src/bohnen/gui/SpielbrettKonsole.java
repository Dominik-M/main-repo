package bohnen.gui;

import bohnen.KI;
import bohnen.KIImpl;
import bohnen.Aktion;
import bohnen.AnAbbauAktion;
import bohnen.Bohnanza;
import bohnen.Bohnenkarte;
import utils.Karte;
import bohnen.SpielListener;
import bohnen.Spieler;
import bohnen.TauschAktion;
import java.awt.event.KeyEvent;
import java.util.LinkedList;
import utils.Arbeiter;
import utils.ArbeiterListener;

/**
 *
 * @author Dominik Messerschmidt <dominik_messerschmidt@yahoo.de>
 */
public class SpielbrettKonsole extends javax.swing.JFrame implements SpielListener,ArbeiterListener{
    private final Bohnanza spiel;
    private final LinkedList<String> letzte;
    private int index;
    private final KI[] KIs=new KI[3];
    private final Arbeiter[] user;
    private boolean[] ready;
    
    
    public SpielbrettKonsole(Arbeiter[] arbeiter,String... spielernamen) {
        setTitle("Bohnanza");
        letzte=new LinkedList();
        index=-1;
        initComponents();
        input.addKeyListener(new java.awt.event.KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {}

            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode()==KeyEvent.VK_UP){
                    index++;
                    if(index>=letzte.size())index=letzte.size()-1;
                    if(letzte.get(index)!=null)input.setText(letzte.get(index));
                }else if(e.getKeyCode()==KeyEvent.VK_DOWN){
                    index--;
                    if(index<0){
                        index=-1;
                        input.setText("");
                    }
                    else if(letzte.get(index)!=null)input.setText(letzte.get(index));
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {}
        });
       spiel=new Bohnanza(spielernamen[0],spielernamen[1],spielernamen[2]);
       spiel.addSpielListener(this);
       user=arbeiter;
       if(user!=null){
           initUsers();
           if(user.length==1){
               spiel.start();
               KIImpl ki = new KIImpl(this, spiel.getSpieler(), 1);
               spiel.addSpielListener(ki);
               KIs[1] = ki;
               ki = new KIImpl(this, spiel.getSpieler(), 2);
               spiel.addSpielListener(ki);
               KIs[2] = ki;
               stapelAusgeben();
           }
       }
       updateUI();
    }
    
    private void initUsers(){
        ready=new boolean[user.length];
        for(int i=0; i<user.length; i++){
            ready[i]=false;
            user[i].addListener(this);
            user[i].send("#start"+i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        input = new javax.swing.JTextField();
        amzug = new javax.swing.JLabel();
        phase = new javax.swing.JLabel();
        stapel = new javax.swing.JLabel();
        ablage = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        spielerView1 = new bohnen.gui.SpielerView();
        spielerView2 = new bohnen.gui.SpielerView();
        spielerView3 = new bohnen.gui.SpielerView();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        output.setEditable(false);
        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        input.setText("Input");
        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        amzug.setText("Am Zug: ");

        phase.setText("Phase:");

        stapel.setText("Stapelkarten: ");

        ablage.setText("Ablagekarten");

        jSlider1.setMajorTickSpacing(25);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);

        jLabel1.setText("Speed");
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spielerView1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spielerView2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spielerView3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(input))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(amzug)
                        .addGap(18, 18, 18)
                        .addComponent(phase)
                        .addGap(18, 18, 18)
                        .addComponent(stapel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ablage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spielerView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spielerView2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spielerView3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amzug)
                    .addComponent(phase)
                    .addComponent(stapel)
                    .addComponent(ablage)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        String in=input.getText();
        println(in);
        letzte.push(in);
        index=-1;
        if(letzte.size()>5)letzte.removeLast();
        if(!dispatchInput(spiel.getAmZug(),in))println("Aktion nicht durchgef√ºhrt");
        else updateUI();
        input.setText("");
    }//GEN-LAST:event_inputActionPerformed

    public boolean dispatchInput(Spieler source,String in){
        switch(in){
            case "printstack":
                stapelAusgeben();
                return true;
            case "pull":
                return spiel.performAktion(new Aktion(source,Aktion.KARTE_ZIEHEN_AKTION));
            case "next":
                return spiel.performAktion(new Aktion(source,Aktion.END_PHASE_AKTION));
            case "buy":
                return spiel.performAktion(new Aktion(source,Aktion.FELDKAUF_AKTION));
            case "ki":
                int spielerindex = spiel.getAmZugIndex();
                if (spiel.getSpieler()[spielerindex].equals(source)) {
                    if (KIs[spielerindex] != null) {
                        spiel.removeSpielListener(KIs[spielerindex]);
                        KIs[spielerindex] = null;
                    } else {
                        KIImpl ki = new KIImpl(this, spiel.getSpieler(), spielerindex);
                        ki.nextTurn(source);
                        spiel.addSpielListener(ki);
                        KIs[spielerindex] = ki;
                    }
                    return true;
                }
        }
        /* pr√ºft ob es ein Ablege-Befehl (drop) ist.
         * Syntax: drop - legt vorderste Karte von der Hand auf n√§chstbestes m√∂gliches Feld
         *         drop.<feldindex> - legt vorderste Karte der Hand auf Feld mit dem feldindex
         *         dropa<index> - legt Karte von der Ablage an der Stelle index auf beliebiges Feld
         *         dropa<index>.<feldindex> - legt Karte von Ablage an Stelle index auf das Feld mit dem feldindex
         */
        if(in.startsWith("drop")){
            in=in.substring(4);
            if(in.startsWith(ABLAGE_POSTFIX)){
                if(in.contains(SEPARATOR)){
                    int n=Integer.parseInt(in.substring(ABLAGE_POSTFIX.length(),in.indexOf(SEPARATOR)));
                    int i=Integer.parseInt(in.substring(in.indexOf(SEPARATOR)+1));
                    if(n<source.getAblageKarten().length)
                      if(spiel.performAktion(new AnAbbauAktion(source,i, (Bohnenkarte) spiel.getAmZug().getAblageKarten()[n])))
                        return true;
                }else{
                  in=in.substring(ABLAGE_POSTFIX.length());
                  int n=Integer.parseInt(in); 
                for(int i=0; i<source.getFelderAnz(); i++)
                if(n<source.getAblageKarten().length)
                    if(spiel.performAktion(new AnAbbauAktion(source,i, (Bohnenkarte) spiel.getAmZug().getAblageKarten()[n])))
                        return true;
                }
            }else{
                if(source.peek()==null) return false;
                if(in.contains(SEPARATOR)){
                  int i=Integer.parseInt(in.substring(SEPARATOR.length()));
                  if(spiel.performAktion(new AnAbbauAktion(source,i, (Bohnenkarte) source.peek()))){
                    updateUI();
                    return true;
                  }
                }else{
                  for(int i=0; i<source.getFelderAnz(); i++){
                    if(spiel.performAktion(new AnAbbauAktion(source,i, (Bohnenkarte) source.peek()))){
                      updateUI();
                      return true;
                    }
                  }
                }
            }
        }else if(in.startsWith("ernte")){
            in=in.substring(5);
            int i=Integer.parseInt(in);
            return spiel.performAktion(new AnAbbauAktion(source,i));
        }
        /* interpretiert tausch Befehle
         * Syntax: tausch<Position>.<Spielername> - schenkt die Karte auf der Position dem Spieler
         *         tausch<Position>.<Spielername>.<Position2> - bietet einen Tausch der Karten auf den Positionen an
         */
        else if(in.startsWith("tausch")){
            Bohnenkarte k1;
            Spieler s2=null;
            Bohnenkarte k2=null;
            in=in.substring(6);
            if(in.startsWith(ABLAGE_POSTFIX)){
                in=in.substring(ABLAGE_POSTFIX.length());
                int n=Integer.parseInt(in); 
                k1=(Bohnenkarte) source.getAblageKarten()[n];
            }else if(in.startsWith(HAND_POSTFIX)){
                k1=(Bohnenkarte)source.peek();
            }else return false;
            in=in.substring(in.indexOf(SEPARATOR)+1);
            for(Spieler s: spiel.getSpieler()) if(in.startsWith(s.toString())){
                s2=s;
                break;
            }
            if(s2==null)return false;
            if(spiel.performAktion(new TauschAktion(source,k1,s2,k2))){
                updateUI();
                return true;
            }
        }
        return false;
    }
    
    public int getSpeed(){
        if(jSlider1.getValue()<=0)return 1;
        return jSlider1.getValue();
    }

//    public static SpielbrettKonsole starte(String s1,String s2, String s3) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SpielbrettKonsole.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        
//        //</editor-fold>
//        SpielbrettKonsole spielbrett=new SpielbrettKonsole(s1,s2,s3);
//        spielbrett.setVisible(true);
//        return spielbrett;
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ablage;
    private javax.swing.JLabel amzug;
    private javax.swing.JTextField input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea output;
    private javax.swing.JLabel phase;
    private bohnen.gui.SpielerView spielerView1;
    private bohnen.gui.SpielerView spielerView2;
    private bohnen.gui.SpielerView spielerView3;
    private javax.swing.JLabel stapel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void println(String s) {
        if(Bohnanza.DEBUG){
          output.append(s + "\n");
          System.out.println(s);
        }
        if (user != null) {
            for (Arbeiter a : user) {
                a.send(s);
            }
        }
    }
    
    private void stapelAusgeben(){
        String stackstring="#stack";
        if(Bohnanza.DEBUG)
          println("Karten:");
        for(Karte k:spiel.getStapelKarten()){
            if(Bohnanza.DEBUG)
              println(k.toString());
            stackstring+=((Bohnenkarte)k).SORTE.ordinal()+";";
        }
        if(user!=null){
            for(Arbeiter a: user){
                a.send(stackstring);
            }
        }
    }

    @Override
    public void ende() {
        for(KI ki:KIs)spiel.removeSpielListener(ki);
        Spieler gewinner=spiel.getAmZug();
        for(Spieler s:spiel.getSpieler())if(s.getScore()>gewinner.getScore())gewinner=s;
        println("#end"+gewinner);
        javax.swing.JOptionPane.showMessageDialog(this, "Spiel beendet.\n"+gewinner+" hat gewonnen.");
    }

    @Override
    public void nextTurn(Spieler onTurn) {
        println("#onturn"+onTurn);
    }

    @Override
    public void karteMoved(Object source,Bohnenkarte k, String from, String to) {
       // println(k+" moved from "+from+" to "+to);
        if(user!=null){
            for(Arbeiter a: user){
                a.send("#move"+k.SORTE.name()+"from"+from+"to"+to);
            }
        }
        updateUI();
    }
    
    public void updateUI(){
        amzug.setText("Am Zug: "+spiel.getAmZug());
        phase.setText("Phase: "+spiel.getPhase());
        stapel.setText("Stapelkarten: "+spiel.getStapelKarten().length);
        ablage.setText("Ablagekarten :"+spiel.getAblageKarten().length);
        Spieler[] spieler=spiel.getSpieler();
        spielerView1.setSpieler(spieler[0]);
        spielerView1.update();
        spielerView2.setSpieler(spieler[1]);
        spielerView2.update();
        spielerView3.setSpieler(spieler[2]);
        spielerView3.update();
    }

    @Override
    public synchronized void hatGesagt(String text) {
        println(text);
        int sourceIndex=-1;
        Spieler[] spieler=spiel.getSpieler();
        for(int i=0; i<spieler.length; i++){
            if(text.startsWith(spieler[i].toString())){
                sourceIndex=i;
                break;
            }
        }
        if(sourceIndex>=0){
            if(text.endsWith("ready") && !spiel.isRunning()){
                ready[sourceIndex]=true;
                boolean allready=true;
                for(int i=0; i<ready.length; i++){
                    if(!ready[i]){
                        allready=false;
                        break;
                    }
                }
                if(allready){
                    spiel.start();
                    stapelAusgeben();
                }
            }else{
                dispatchInput(spieler[sourceIndex],text.substring(spieler[sourceIndex].toString().length()+2));
            }
        }
    }

    @Override
    public void feuern(Arbeiter a) {
        javax.swing.JOptionPane.showMessageDialog(this, "User "+a+" disconnected", "Error - Connection lost", javax.swing.JOptionPane.ERROR_MESSAGE);
        println("#end");
        System.exit(1);
    }

    @Override
    public void nextPhase(int phase) {
        println("#phase"+phase);
    }

    @Override
    public void coinsAdded(Spieler s, int anz) {
        println("#coins"+s+SEPARATOR+anz);
    }
}
