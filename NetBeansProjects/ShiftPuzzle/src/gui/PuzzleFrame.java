/*
 * Copyright (C) 2019 Dominik Messerschmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package gui;

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import main.IntTuple;
import main.ShiftPuzzle;

/**
 *
 * @author Dominik Messerschmidt
 */
public class PuzzleFrame extends javax.swing.JFrame
{

    private final ShiftPuzzle puzzle;
    private PuzzlePanel panel;
    private LinkedList<IntTuple> playbackSequence;

    /**
     * Creates new form MainFrame
     *
     * @param puzzleSize
     */
    public PuzzleFrame(int puzzleSize)
    {
        puzzle = new ShiftPuzzle(puzzleSize);
        try
        {
            panel = new PuzzlePanel(puzzle, ImageIO.read(new File("image.png")));
        }
        catch (IOException ex)
        {
            Logger.getLogger(PuzzleFrame.class.getName()).log(Level.SEVERE, null, ex);
            panel = new PuzzlePanel(puzzle);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = panel;
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Solve");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Playback sequence");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Copy tile list");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem1ActionPerformed
        if (playbackSequence != null)
        {
            panel.startPlayback(playbackSequence);
            playbackSequence = null;
        }
        else
        {
            new Thread(new Runnable()
            {
                @Override
                public void run()
                {
                    ShiftPuzzle clone = puzzle.clone();
                    LinkedList<IntTuple> solution = null;

                    // Java Function
                    solution = main.Main.solvePuzzle(clone);

                    if (solution != null)
                    {
                        System.out.println("Java Function: Wow we solved the puzzle! We just need these " + solution.size() + " moves:");
                        for (IntTuple move : solution)
                        {
                            System.out.print("(" + move.X + "," + move.Y + ") ");
                        }
                        System.out.println();
                        playbackSequence = solution;

                        panel.startPlayback(playbackSequence);
                    }
                }
            }).start();
            /*
            new Thread(new Runnable()
            {
                @Override
                public void run()
                {
                    ShiftPuzzle clone = puzzle.clone();
                    LinkedList<IntTuple> solution = null;

                    // JNI C Function call
                    int[] result = main.NativePuzzleSolver.solvePuzzle(puzzle.getTiles());
                    if (result != null)
                    {
                        solution = IntTuple.toTileList(result);
                    }

                    if (solution != null)
                    {
                        System.out.println("JNI Call: Wow we solved the puzzle! We just need these " + solution.size() + " moves:");
                        for (IntTuple move : solution)
                        {
                            System.out.print("(" + move.X + "," + move.Y + ") ");
                        }
                        System.out.println();
                        playbackSequence = solution;
                    }
                }
            }).start();
             */
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem2ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem2ActionPerformed
        // Read sequence string from Dialog
        String input = JOptionPane.showInputDialog("Please enter a list of Tuples, like: (x,y),(x1,y1),...");
        LinkedList<IntTuple> sequence = IntTuple.parse(input);
        if (sequence != null)
        {

            panel.startPlayback(sequence);
        }
        else
        {
            System.err.println("Failed to parse input: " + input);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem3ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem3ActionPerformed
        int[][] tiles = puzzle.getTiles();
        for (int x = 0; x < tiles.length; x++)
        {
            for (int y = 0; y < tiles.length; y++)
            {
                System.out.print(tiles[x][y] + " ");
            }
        }
        System.out.println();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
