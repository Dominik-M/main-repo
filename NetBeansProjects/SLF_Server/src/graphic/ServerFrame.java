/**
 * Copyright (C) 2016 Dominik Messerschmidt
 * <dominik.messerschmidt@continental-corporation.com>
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package graphic;

import server.Constants;
import server.ServerListener;
import server.Worker;

/**
 *
 * @author Dominik Messerschmidt
 * <dominik.messerschmidt@continental-corporation.com> Created 14.09.2016
 */
public class ServerFrame extends javax.swing.JFrame implements ServerListener {

    /**
     * Creates new form ServerFrame
     */
    public ServerFrame() {
        initComponents();
        runLabel.setText("Server is not running");
        userlist.setModel(new javax.swing.AbstractListModel() {
            public int getSize() {
                return server.Server.getInstance().getUserNames().length;
            }

            public Object getElementAt(int i) {
                return server.Server.getInstance().getUserNames()[i];
            }
        });
        server.Server.getInstance().addServerListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hostIP = new javax.swing.JLabel();
        start = new javax.swing.JButton();
        runLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userlist = new javax.swing.JList();
        input = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        systemMenu = new javax.swing.JMenu();
        clientMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        hostIP.setText("Host IP: localhost");

        start.setText("Start Server");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        runLabel.setForeground(new java.awt.Color(255, 0, 0));
        runLabel.setText("Server is not running 999.999.999.999:99999");

        userlist.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Username1", "Username2", "Username3" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(userlist);

        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        output.setColumns(20);
        output.setRows(5);
        jScrollPane2.setViewportView(output);

        systemMenu.setText("System");

        clientMenuItem.setText("Open new Client window");
        clientMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientMenuItemActionPerformed(evt);
            }
        });
        systemMenu.add(clientMenuItem);

        jMenuBar1.add(systemMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hostIP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(start)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addComponent(input))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hostIP)
                            .addComponent(start)
                            .addComponent(runLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        if (!server.Server.getInstance().isRunning()) {
            server.Server.getInstance().start();
        } else {
            server.Server.getInstance().close();
        }
    }//GEN-LAST:event_startActionPerformed

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        String in = input.getText();
        //println(in);
        server.Server.getInstance().sendAll("Server: " + in);
        if (in.equals("spam")) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 1000000; i++) {
                        server.Server.getInstance().sendAll("spam");
                    }
                }
            }).start();

        }
        input.setText("");
    }//GEN-LAST:event_inputActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void clientMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientMenuItemActionPerformed
        //new ClientFrame().setVisible(true);
    }//GEN-LAST:event_clientMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (server.Server.getInstance().isRunning()) {
            server.Server.getInstance().close();
        }
        if (database.Database.getInstance().save(Constants.DB_FILE)) {
            System.out.println("Saved Database file " + Constants.DB_FILE);
        } else {
            System.err.println("Failed to save Database");
        }
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem clientMenuItem;
    private javax.swing.JLabel hostIP;
    private javax.swing.JTextField input;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea output;
    private javax.swing.JLabel runLabel;
    private javax.swing.JButton start;
    private javax.swing.JMenu systemMenu;
    private javax.swing.JList userlist;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onStart() {
        runLabel.setForeground(new java.awt.Color(0, 200, 0));
        runLabel.setText("Server is online");
        start.setText("Shutdown");
    }

    @Override
    public void onClose() {
        runLabel.setForeground(new java.awt.Color(255, 0, 0));
        runLabel.setText("Server is not running");
        start.setText("Start Server");
    }

    @Override
    public void onUserlistChange() {
        userlist.setModel(new javax.swing.AbstractListModel() {
            public int getSize() {
                return server.Server.getInstance().getUserNames().length;
            }

            public Object getElementAt(int i) {
                return server.Server.getInstance().getUserNames()[i];
            }
        });
    }

    @Override
    public void println(String txt) {
        output.append(txt + "\n");
    }

    @Override
    public synchronized boolean performRequest(Worker source, int code, String params) {
        switch (code) {
            case Constants.REQUEST_NAME:
                source.setArbeiterName(params);
                server.Server.getInstance().sendUserList();
                notify();
                return true;
            case Constants.REQUEST_QUIT:
                server.Server.getInstance().sendAll(source + " requested to quit");
                server.Server.getInstance().close();
                return true;
            case Constants.REQUEST_PRINT:
                server.Server.getInstance().sendAll(source + ": " + params);
                return true;
            case Constants.REQUEST_VALIDATE:
                int index = params.indexOf(database.Database.END_KEY);
                boolean valid = false;
                if (index > 0) {
                    valid = database.Database.getInstance().isValid(params.substring(0, index), params.substring(index + 1));
                }
                if (valid) {
                    source.send(Constants.COMMAND + Constants.C_OK);
                } else {
                    source.send(Constants.COMMAND + Constants.C_NOK);
                }
                return true;
            default:
                source.send(Constants.ERROR + Constants.ERROR_UNKNOWN_COMMAND);
                System.err.println("Unknown Request Code: " + code);
                return false;
        }
    }
}
