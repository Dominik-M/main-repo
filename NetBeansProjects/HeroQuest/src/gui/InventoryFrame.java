/*
 * Copyright (C) 2022 Dominik Messerschmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package gui;

import main.Actor;
import main.Equip;
import main.EquipItem;
import main.Game;
import main.GoldItem;
import main.Item;
import main.Weapon;
import main.WeaponItem;

/**
 *
 * @author Dominik Messerschmidt
 */
public class InventoryFrame extends javax.swing.JDialog
{

    private Actor actor;

    /**
     * Creates new form InventoryFrame
     *
     * @param a Owner of the inventory
     */
    public InventoryFrame(Actor a)
    {
        super(MainFrame.getInstance());

        initComponents();
        setLocation(MainFrame.getInstance().getX() + MainFrame.getInstance().getWidth() / 2, MainFrame.getInstance().getY() + MainFrame.getInstance().getHeight() / 2);
        setModal(true);
        actor = a;
        update();
    }

    public void update()
    {
        title.setText("Inventory of " + actor);
        gold.setText("Gold: " + actor.getGold());
        jList1.setModel(new javax.swing.AbstractListModel<String>()
        {
            @Override
            public int getSize()
            {
                return actor.getInventory().length;
            }

            @Override
            public String getElementAt(int i)
            {
                return actor.getInventory()[i].toString();
            }
        });
        jList2.setModel(new javax.swing.AbstractListModel<String>()
        {

            @Override
            public int getSize()
            {
                if (actor.getWeapon() == Weapon.NONE)
                {
                    return actor.getEquipment().length;
                }
                return 1 + actor.getEquipment().length;
            }

            @Override
            public String getElementAt(int i)
            {
                if (i == 0)
                {
                    return actor.getWeapon().toString();
                }
                else
                {
                    return actor.getEquipment()[i - 1].toString();
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        title = new javax.swing.JLabel();
        gold = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        useBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        unequipBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        title.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        title.setText("Inventory of ");

        gold.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        gold.setText("Gold: ");

        jList1.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Items:");

        useBtn.setText("Use / Equip");
        useBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                useBtnActionPerformed(evt);
            }
        });

        jList2.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Equipped:");

        unequipBtn.setText("Unequip");
        unequipBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                unequipBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gold)
                            .addComponent(jLabel1)
                            .addComponent(useBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(unequipBtn))
                                    .addComponent(jLabel2))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addGap(18, 18, 18)
                .addComponent(gold)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useBtn)
                    .addComponent(unequipBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jList1ValueChanged
    {//GEN-HEADEREND:event_jList1ValueChanged
        String description = "Items";
        Item sel = getSelectedItem();
        if (sel != null)
        {
            description = sel.getDescription();
        }
        jList1.setToolTipText(description);
    }//GEN-LAST:event_jList1ValueChanged

    private void useBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_useBtnActionPerformed
    {//GEN-HEADEREND:event_useBtnActionPerformed
        Item sel = getSelectedItem();
        if (sel != null)
        {
            if (WeaponItem.class.isInstance(sel)
                    || EquipItem.class.isInstance(sel)
                    || GoldItem.class.isInstance(sel))
            {
                if (sel.use())
                {
                    actor.removeItem(sel);
                }
                update();
            }
            else
            {
                Game.getInstance().useItem(sel);
                dispose();
            }
        }
        else
        {
            System.err.println("Selection invalid");
        }
    }//GEN-LAST:event_useBtnActionPerformed

    private void unequipBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_unequipBtnActionPerformed
    {//GEN-HEADEREND:event_unequipBtnActionPerformed
        int[] indices = jList2.getSelectedIndices();
        for (int i : indices)
        {
            System.out.println("Unequip index: " + i);
            if (i == 0)
            {
                WeaponItem item = new WeaponItem(actor.getWeapon());
                actor.setWeapon(Weapon.NONE);
                actor.addItem(item);
            }
            else
            {
                Equip e = actor.getEquipment()[i - 1];
                actor.removeEquip(e);
                EquipItem item = new EquipItem(e);
                actor.addItem(item);
            }
        }
        update();
        repaint();
    }//GEN-LAST:event_unequipBtnActionPerformed

    public Item getSelectedItem()
    {
        int index = jList1.getSelectedIndex();
        Item[] inventory = actor.getInventory();
        if (index >= 0 && index < inventory.length)
        {
            return inventory[index];
        }
        return null;
    }

    public static void show(Actor a)
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(InventoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(InventoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(InventoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(InventoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new InventoryFrame(a).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel gold;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel title;
    private javax.swing.JButton unequipBtn;
    private javax.swing.JButton useBtn;
    // End of variables declaration//GEN-END:variables
}
