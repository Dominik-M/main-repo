/*
 * Copyright (C) 2022 Dominik Messerschmidt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package gui;

import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import main.Actor;
import main.Board;
import main.Game;
import main.GameListener;
import main.Quest;

/**
 *
 * @author Dominik Messerschmidt
 */
public class MainFrame extends javax.swing.JFrame implements GameListener
{

    private static MainFrame instance;

    public static final int MAX_CHARACTER_PANELS = 32;

    private final CharacterPanel[] CHARACTER_PANELS = new CharacterPanel[MAX_CHARACTER_PANELS];

    private PalettePanel pallette;

    private final LinkedList<String> messages = new LinkedList<>();

    /**
     * Creates new form MainFrame
     */
    private MainFrame()
    {
        System.out.println("Create MainFrame");
        initComponents();
        pallette = new PalettePanel();
        actorsPanel.setLayout(new GridLayout(MAX_CHARACTER_PANELS, 1, 5, 10));
        for (int i = 0; i < CHARACTER_PANELS.length; i++)
        {
            CharacterPanel cp = new CharacterPanel();
            actorsPanel.add(cp);
            CHARACTER_PANELS[i] = cp;
        }
        update();
    }

    private void update()
    {
        // actorsPanel.removeAll();
        Actor[] actors = Game.getInstance().getActors();
        for (int i = 0; i < CHARACTER_PANELS.length; i++)
        {
            CharacterPanel cp = CHARACTER_PANELS[i];
            cp.setActor(i < actors.length ? actors[i] : null);
            cp.update();
            cp.repaint();
        }
        actorsPanel.repaint();

        switch (Game.getInstance().getState())
        {
            case HEROES_TURN_ACTION:
                attackBtn.setEnabled(true);
                useBtn.setEnabled(true);
                skipBtn.setEnabled(true);
                searchBtn.setEnabled(true);
                lootBtn.setEnabled(true);
                break;
            case HEROES_TURN_MOVE:
                skipBtn.setEnabled(true);
                break;
            case HEROES_TURN_MOVE_DOORAHEAD:
                skipBtn.setEnabled(true);
                openBtn.setEnabled(true);
                break;
            default:
                attackBtn.setEnabled(false);
                useBtn.setEnabled(false);
                skipBtn.setEnabled(false);
                searchBtn.setEnabled(false);
                lootBtn.setEnabled(false);
                openBtn.setEnabled(false);
                break;
        }

        shopBtn.setEnabled(Game.getInstance().isNoEnemyOnBoard());
    }

    public static MainFrame getInstance()
    {
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jMenuItem3 = new javax.swing.JMenuItem();
        boardPanel = new gui.BoardPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        actorsPanel = new javax.swing.JPanel();
        attackBtn = new javax.swing.JButton();
        lootBtn = new javax.swing.JButton();
        useBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        skipBtn = new javax.swing.JButton();
        openBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        shopBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        startNewItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        editModeItem = new javax.swing.JCheckBoxMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusable(false);
        setPreferredSize(new java.awt.Dimension(1280, 800));

        javax.swing.GroupLayout boardPanelLayout = new javax.swing.GroupLayout(boardPanel);
        boardPanel.setLayout(boardPanelLayout);
        boardPanelLayout.setHorizontalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 950, Short.MAX_VALUE)
        );
        boardPanelLayout.setVerticalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setFocusable(false);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(380, 32767));

        actorsPanel.setFocusable(false);
        actorsPanel.setMaximumSize(new java.awt.Dimension(385, 32767));

        javax.swing.GroupLayout actorsPanelLayout = new javax.swing.GroupLayout(actorsPanel);
        actorsPanel.setLayout(actorsPanelLayout);
        actorsPanelLayout.setHorizontalGroup(
            actorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 385, Short.MAX_VALUE)
        );
        actorsPanelLayout.setVerticalGroup(
            actorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 515, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(actorsPanel);

        attackBtn.setText("Attack");
        attackBtn.setFocusable(false);
        attackBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                attackBtnActionPerformed(evt);
            }
        });

        lootBtn.setText("Loot");
        lootBtn.setFocusable(false);
        lootBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                lootBtnActionPerformed(evt);
            }
        });

        useBtn.setText("Use");
        useBtn.setFocusable(false);
        useBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                useBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.setToolTipText("");
        searchBtn.setFocusable(false);
        searchBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchBtnActionPerformed(evt);
            }
        });

        skipBtn.setText("Skip");
        skipBtn.setFocusable(false);
        skipBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                skipBtnActionPerformed(evt);
            }
        });

        openBtn.setText("Open");
        openBtn.setFocusable(false);
        openBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openBtnActionPerformed(evt);
            }
        });

        jScrollPane2.setBackground(new java.awt.Color(145, 95, 8));
        jScrollPane2.setFocusable(false);

        jTextArea1.setBackground(new java.awt.Color(145, 95, 8));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Felix Titling", 0, 18)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jTextArea1.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        jTextArea1.setFocusable(false);
        jScrollPane2.setViewportView(jTextArea1);

        shopBtn.setText("SHOP");
        shopBtn.setEnabled(false);
        shopBtn.setFocusable(false);
        shopBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                shopBtnActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        startNewItem.setText("Start New Quest");
        startNewItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                startNewItemActionPerformed(evt);
            }
        });
        jMenu1.add(startNewItem);

        jMenuItem1.setText("Save game");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Load game");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        editModeItem.setText("Edit Mode");
        editModeItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editModeItemActionPerformed(evt);
            }
        });
        jMenu2.add(editModeItem);

        jMenuItem4.setText("Load File");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Save File");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lootBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(attackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(useBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addComponent(openBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(skipBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(shopBtn))
                            .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(attackBtn)
                            .addComponent(useBtn)
                            .addComponent(searchBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lootBtn)
                            .addComponent(skipBtn)
                            .addComponent(openBtn)
                            .addComponent(shopBtn))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void attackBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_attackBtnActionPerformed
    {//GEN-HEADEREND:event_attackBtnActionPerformed
        Game.getInstance().select(Game.Action.ATTACK);
    }//GEN-LAST:event_attackBtnActionPerformed

    private void useBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_useBtnActionPerformed
    {//GEN-HEADEREND:event_useBtnActionPerformed
        Game.getInstance().select(Game.Action.INVALID);
        InventoryFrame.show(Game.getInstance().getActorOnTurn());
    }//GEN-LAST:event_useBtnActionPerformed

    private void lootBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lootBtnActionPerformed
    {//GEN-HEADEREND:event_lootBtnActionPerformed
        Game.getInstance().select(Game.Action.LOOT);
    }//GEN-LAST:event_lootBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchBtnActionPerformed
    {//GEN-HEADEREND:event_searchBtnActionPerformed
        Game.getInstance().select(Game.Action.SEARCH);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void skipBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_skipBtnActionPerformed
    {//GEN-HEADEREND:event_skipBtnActionPerformed
        Game.getInstance().select(Game.Action.NOTHING);
    }//GEN-LAST:event_skipBtnActionPerformed

    private void openBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openBtnActionPerformed
    {//GEN-HEADEREND:event_openBtnActionPerformed
        Game.getInstance().select(Game.Action.OPEN);
    }//GEN-LAST:event_openBtnActionPerformed

    private void editModeItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editModeItemActionPerformed
    {//GEN-HEADEREND:event_editModeItemActionPerformed
        setEditMode(editModeItem.getState());
    }//GEN-LAST:event_editModeItemActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem4ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem4ActionPerformed
        System.out.println("Load from file...");
        JFileChooser jfc = new JFileChooser(new File("."));
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File f = jfc.getSelectedFile();
            String config = "";
            try
            {
                BufferedReader reader = new BufferedReader(new FileReader(f));
                String line = reader.readLine();
                while (line != null)
                {
                    config += line + "\n";
                    line = reader.readLine();
                }
                reader.close();
                Game.getInstance().getBoard().initBaseMap();
                Game.getInstance().getBoard().parseConfig(config);
            }
            catch (Exception ex)
            {
                Logger.getLogger(Quest.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem5ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem5ActionPerformed
        System.out.println("Save to file...");
        JFileChooser jfc = new JFileChooser(new File("."));
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File f = jfc.getSelectedFile();
            try
            {
                PrintWriter writer = new PrintWriter(f);
                writer.print(Game.getInstance().getBoard().getConfig());
                writer.close();
            }
            catch (FileNotFoundException ex)
            {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void shopBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopBtnActionPerformed
    {//GEN-HEADEREND:event_shopBtnActionPerformed
        if (Game.getInstance().isNoEnemyOnBoard())
        {
            System.out.println("SHOP");
            new ShopFrame().setVisible(true);
        }
    }//GEN-LAST:event_shopBtnActionPerformed

    private void startNewItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startNewItemActionPerformed
    {//GEN-HEADEREND:event_startNewItemActionPerformed
        System.out.println("Load from file...");
        File questsdir = new File("./quests");
        if (!questsdir.exists())
        {
            questsdir.mkdir();
        }
        JFileChooser jfc = new JFileChooser(questsdir);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File f = jfc.getSelectedFile();
            Quest q = Quest.loadQuestFromFile(f);
            Game.getInstance().startQuest(q);
        }
    }//GEN-LAST:event_startNewItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem1ActionPerformed
        System.out.println("Save game to file...");
        File savesdir = new File("./savegames");
        if (!savesdir.exists())
        {
            savesdir.mkdir();
        }
        JFileChooser jfc = new JFileChooser(savesdir);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File f = jfc.getSelectedFile();
            Game.getInstance().save(f);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem2ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem2ActionPerformed
        System.out.println("Load game from file...");
        File savesdir = new File("./savegames");
        if (!savesdir.exists())
        {
            savesdir.mkdir();
        }
        JFileChooser jfc = new JFileChooser(savesdir);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File f = jfc.getSelectedFile();
            if (Game.load(f))
            {
                JOptionPane.showMessageDialog(this, "Game loaded");
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Failed to load game", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    public void setEditMode(boolean editMode)
    {
        boardPanel.setEditMode(editMode);
        if (editMode)
        {
            System.out.println("Edit Mode Activated");
            jScrollPane1.setViewportView(pallette);
        }
        else
        {
            System.out.println("Edit Mode Deactivated");
            jScrollPane1.setViewportView(actorsPanel);
        }
    }

    public static void start()
    {
        if (instance != null)
        {
            System.err.println("MainFrame.start(): There is already an instance of MainFrame running!");
            return;
        }
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        instance = new MainFrame();
        instance.setVisible(true);
        instance.boardPanel.requestFocus();
        Game.getInstance().addGameListener(instance);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actorsPanel;
    private javax.swing.JButton attackBtn;
    private gui.BoardPanel boardPanel;
    private javax.swing.JCheckBoxMenuItem editModeItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton lootBtn;
    private javax.swing.JButton openBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton shopBtn;
    private javax.swing.JButton skipBtn;
    private javax.swing.JMenuItem startNewItem;
    private javax.swing.JButton useBtn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void message(String msg)
    {
        messages.add(msg);
    }

    @Override
    public void nextTurn(int turn)
    {
        Actor a = Game.getInstance().getActorOnTurn();
        boardPanel.setViewToField(a.getX(), a.getY());
    }

    @Override
    public void stateChanged(Game.TurnState newstate)
    {
        update();
    }

    public boolean popMessage()
    {
        if (messages.size() > 0)
        {
            String msg = messages.pop();
            jTextArea1.append(msg + "\r\n");
            return true;
        }
        else
        {
            return false;
        }
    }

    void placeItemFromPallette(int gridX, int gridY)
    {
        Board.BoardObject object = pallette.getSelectedItem();
        Game.getInstance().getBoard().placeObject(object, gridX, gridY);
    }

    void removeItemFromPallette(int gridX, int gridY)
    {
        Board.BoardObject object = pallette.getSelectedItem();
        Game.getInstance().getBoard().removeObject(object, gridX, gridY);
    }
}
